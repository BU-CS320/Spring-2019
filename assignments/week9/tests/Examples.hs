module Examples where
import LambdaCalcImplementation (mkFreeVar, bindToLam, mkApp, Term)

import Data.Set (Set, fromList)

data ResTwo a = ResTwo (String, String) (Term, Term) a

eqRes = 
    [ResTwo ("x","x") ((mkFreeVar "x"), (mkFreeVar "x")) True,
    ResTwo ("y","y") ((mkFreeVar "y"), (mkFreeVar "y")) True,
    ResTwo ("z","z") ((mkFreeVar "z"), (mkFreeVar "z")) True,
    ResTwo ("x x","x x") (((mkFreeVar "x") `mkApp` (mkFreeVar "x")), ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) True,
    ResTwo ("\\x -> x","\\x -> x") ((bindToLam "x"(mkFreeVar "x")), (bindToLam "x"(mkFreeVar "x"))) True,
    ResTwo ("\\x -> x","\\y -> y") ((bindToLam "x"(mkFreeVar "x")), (bindToLam "y"(mkFreeVar "y"))) True,
    ResTwo ("\\x -> x","\\z -> z") ((bindToLam "x"(mkFreeVar "x")), (bindToLam "z"(mkFreeVar "z"))) True,
    ResTwo ("y y","y y") (((mkFreeVar "y") `mkApp` (mkFreeVar "y")), ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) True,
    ResTwo ("\\z -> x","\\z -> x") ((bindToLam "z"(mkFreeVar "x")), (bindToLam "z"(mkFreeVar "x"))) True,
    ResTwo ("\\z -> x","\\y -> x") ((bindToLam "z"(mkFreeVar "x")), (bindToLam "y"(mkFreeVar "x"))) True,
    ResTwo ("y x","y x") (((mkFreeVar "y") `mkApp` (mkFreeVar "x")), ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) True,
    ResTwo ("\\y -> x","\\z -> x") ((bindToLam "y"(mkFreeVar "x")), (bindToLam "z"(mkFreeVar "x"))) True,
    ResTwo ("\\y -> x","\\y -> x") ((bindToLam "y"(mkFreeVar "x")), (bindToLam "y"(mkFreeVar "x"))) True,
    ResTwo ("x y","x y") (((mkFreeVar "x") `mkApp` (mkFreeVar "y")), ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) True,
    ResTwo ("\\x -> y","\\x -> y") ((bindToLam "x"(mkFreeVar "y")), (bindToLam "x"(mkFreeVar "y"))) True,
    ResTwo ("\\x -> y","\\z -> y") ((bindToLam "x"(mkFreeVar "y")), (bindToLam "z"(mkFreeVar "y"))) True,
    ResTwo ("z z","z z") (((mkFreeVar "z") `mkApp` (mkFreeVar "z")), ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) True,
    ResTwo ("\\z -> y","\\x -> y") ((bindToLam "z"(mkFreeVar "y")), (bindToLam "x"(mkFreeVar "y"))) True,
    ResTwo ("\\z -> y","\\z -> y") ((bindToLam "z"(mkFreeVar "y")), (bindToLam "z"(mkFreeVar "y"))) True,
    ResTwo ("z y","z y") (((mkFreeVar "z") `mkApp` (mkFreeVar "y")), ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))) True,
    ResTwo ("\\y -> y","\\x -> x") ((bindToLam "y"(mkFreeVar "y")), (bindToLam "x"(mkFreeVar "x"))) True,
    ResTwo ("\\y -> y","\\y -> y") ((bindToLam "y"(mkFreeVar "y")), (bindToLam "y"(mkFreeVar "y"))) True,
    ResTwo ("\\y -> y","\\z -> z") ((bindToLam "y"(mkFreeVar "y")), (bindToLam "z"(mkFreeVar "z"))) True,
    ResTwo ("z x","z x") (((mkFreeVar "z") `mkApp` (mkFreeVar "x")), ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))) True,
    ResTwo ("\\x -> z","\\x -> z") ((bindToLam "x"(mkFreeVar "z")), (bindToLam "x"(mkFreeVar "z"))) True,
    ResTwo ("\\x -> z","\\y -> z") ((bindToLam "x"(mkFreeVar "z")), (bindToLam "y"(mkFreeVar "z"))) True,
    ResTwo ("y z","y z") (((mkFreeVar "y") `mkApp` (mkFreeVar "z")), ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) True,
    ResTwo ("\\z -> z","\\x -> x") ((bindToLam "z"(mkFreeVar "z")), (bindToLam "x"(mkFreeVar "x"))) True,
    ResTwo ("\\z -> z","\\y -> y") ((bindToLam "z"(mkFreeVar "z")), (bindToLam "y"(mkFreeVar "y"))) True,
    ResTwo ("\\z -> z","\\z -> z") ((bindToLam "z"(mkFreeVar "z")), (bindToLam "z"(mkFreeVar "z"))) True,
    ResTwo ("x z","x z") (((mkFreeVar "x") `mkApp` (mkFreeVar "z")), ((mkFreeVar "x") `mkApp` (mkFreeVar "z"))) True,
    ResTwo ("\\y -> z","\\x -> z") ((bindToLam "y"(mkFreeVar "z")), (bindToLam "x"(mkFreeVar "z"))) True,
    ResTwo ("\\y -> z","\\y -> z") ((bindToLam "y"(mkFreeVar "z")), (bindToLam "y"(mkFreeVar "z"))) True,
    ResTwo ("x x (x x)","x x (x x)") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\x -> x x","\\x -> x x") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\x -> x x","\\y -> y y") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    ResTwo ("\\x -> x x","\\z -> z z") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) True,
    ResTwo ("x x z","x x z") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) True,
    ResTwo ("\\z -> x x","\\z -> x x") ((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\z -> x x","\\y -> x x") ((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("x x y","x x y") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) True,
    ResTwo ("\\y -> x x","\\z -> x x") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\y -> x x","\\y -> x x") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("x x x","x x x") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) True,
    ResTwo ("\\x -> \\x -> x","\\x -> \\x -> x") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\x -> \\x -> x","\\z -> \\x -> x") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "z"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\x -> \\x -> x","\\y -> \\x -> x") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\x -> \\x -> x","\\x -> \\y -> y") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("\\x -> \\x -> x","\\z -> \\y -> y") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "z"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("\\x -> \\x -> x","\\y -> \\y -> y") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("z (x x)","z (x x)") (((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\z -> \\x -> x","\\x -> \\x -> x") ((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\z -> \\x -> x","\\z -> \\x -> x") ((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "z"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\z -> \\x -> x","\\y -> \\x -> x") ((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\z -> \\x -> x","\\x -> \\y -> y") ((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("\\z -> \\x -> x","\\z -> \\y -> y") ((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "z"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("\\z -> \\x -> x","\\y -> \\y -> y") ((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("y (x x)","y (x x)") (((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\y -> \\x -> x","\\x -> \\x -> x") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\y -> \\x -> x","\\z -> \\x -> x") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "z"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\y -> \\x -> x","\\y -> \\x -> x") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\y -> \\x -> x","\\x -> \\y -> y") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("\\y -> \\x -> x","\\z -> \\y -> y") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "z"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("\\y -> \\x -> x","\\y -> \\y -> y") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "y")))) True,
    ResTwo ("x (x x)","x (x x)") (((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\x -> y y","\\x -> y y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    ResTwo ("\\x -> y y","\\z -> y y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    ResTwo ("(\\x -> x) (\\x -> x)","(\\x -> x) (\\x -> x)") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))), ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    ResTwo ("\\z -> y y","\\x -> y y") ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    ResTwo ("\\z -> y y","\\z -> y y") ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    ResTwo ("(\\x -> x) (x x)","(\\x -> x) (x x)") (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\y -> y y","\\x -> x x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    ResTwo ("\\y -> y y","\\y -> y y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    ResTwo ("\\y -> y y","\\z -> z z") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) True,
    ResTwo ("(\\x -> x) z","(\\x -> x) z") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")), ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) True,
    ResTwo ("\\x -> \\z -> x","\\x -> \\z -> x") ((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "z"(mkFreeVar "x")))) True,
    ResTwo ("\\x -> \\z -> x","\\x -> \\y -> x") ((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "x")))) True,
    ResTwo ("\\x -> \\z -> x","\\y -> \\x -> y") ((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "y")))) True,
    ResTwo ("\\x -> \\z -> x","\\y -> \\z -> y") ((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "z"(mkFreeVar "y")))) True,
    ResTwo ("(\\x -> x) y","(\\x -> x) y") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")), ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) True,
    ResTwo ("x","y") ((mkFreeVar "x"), (mkFreeVar "y")) False,
    ResTwo ("y","x") ((mkFreeVar "y"), (mkFreeVar "x")) False,
    ResTwo ("x x","y y") (((mkFreeVar "x") `mkApp` (mkFreeVar "x")), ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("x x","y x") (((mkFreeVar "x") `mkApp` (mkFreeVar "x")), ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("x x","x y") (((mkFreeVar "x") `mkApp` (mkFreeVar "x")), ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("\\x -> x","\\y -> x") ((bindToLam "x"(mkFreeVar "x")), (bindToLam "y"(mkFreeVar "x"))) False,
    ResTwo ("\\x -> x","\\x -> y") ((bindToLam "x"(mkFreeVar "x")), (bindToLam "x"(mkFreeVar "y"))) False,
    ResTwo ("y y","x x") (((mkFreeVar "y") `mkApp` (mkFreeVar "y")), ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("y y","y x") (((mkFreeVar "y") `mkApp` (mkFreeVar "y")), ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("y y","x y") (((mkFreeVar "y") `mkApp` (mkFreeVar "y")), ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("y x","x x") (((mkFreeVar "y") `mkApp` (mkFreeVar "x")), ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("y x","y y") (((mkFreeVar "y") `mkApp` (mkFreeVar "x")), ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("y x","x y") (((mkFreeVar "y") `mkApp` (mkFreeVar "x")), ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("\\y -> x","\\x -> x") ((bindToLam "y"(mkFreeVar "x")), (bindToLam "x"(mkFreeVar "x"))) False,
    ResTwo ("\\y -> x","\\x -> y") ((bindToLam "y"(mkFreeVar "x")), (bindToLam "x"(mkFreeVar "y"))) False,
    ResTwo ("\\y -> x","\\y -> y") ((bindToLam "y"(mkFreeVar "x")), (bindToLam "y"(mkFreeVar "y"))) False,
    ResTwo ("x y","x x") (((mkFreeVar "x") `mkApp` (mkFreeVar "y")), ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("x y","y y") (((mkFreeVar "x") `mkApp` (mkFreeVar "y")), ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("x y","y x") (((mkFreeVar "x") `mkApp` (mkFreeVar "y")), ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("\\x -> y","\\x -> x") ((bindToLam "x"(mkFreeVar "y")), (bindToLam "x"(mkFreeVar "x"))) False,
    ResTwo ("\\x -> y","\\y -> x") ((bindToLam "x"(mkFreeVar "y")), (bindToLam "y"(mkFreeVar "x"))) False,
    ResTwo ("\\x -> y","\\y -> y") ((bindToLam "x"(mkFreeVar "y")), (bindToLam "y"(mkFreeVar "y"))) False,
    ResTwo ("\\y -> y","\\y -> x") ((bindToLam "y"(mkFreeVar "y")), (bindToLam "y"(mkFreeVar "x"))) False,
    ResTwo ("\\y -> y","\\x -> y") ((bindToLam "y"(mkFreeVar "y")), (bindToLam "x"(mkFreeVar "y"))) False,
    ResTwo ("x x (x x)","y y (y y)") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("x x (x x)","y y (x x)") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("x x (x x)","x x (y y)") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> x x","\\y -> x x") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> x x","\\x -> y y") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> x x","\\x -> y x") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> x x","\\y -> y x") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> x x","\\x -> x y") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> x x","\\y -> x y") ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("x x y","x x x") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("x x y","y y y") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("x x y","y y x") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("\\y -> x x","\\x -> x x") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> x x","\\x -> y y") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> x x","\\y -> y y") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> x x","\\x -> y x") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> x x","\\y -> y x") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> x x","\\x -> x y") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> x x","\\y -> x y") ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("x x x","x x y") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("x x x","y y y") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("x x x","y y x") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("\\x -> \\x -> x","\\x -> \\y -> x") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> \\x -> x","\\y -> \\y -> x") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> \\x -> x","\\x -> \\x -> y") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))) False,
    ResTwo ("\\x -> \\x -> x","\\y -> \\x -> y") ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "y")))) False,
    ResTwo ("y (x x)","x (x x)") (((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("y (x x)","y (y y)") (((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("y (x x)","x (y y)") (((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> \\x -> x","\\x -> \\y -> x") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "x")))) False,
    ResTwo ("\\y -> \\x -> x","\\y -> \\y -> x") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "x")))) False,
    ResTwo ("\\y -> \\x -> x","\\x -> \\x -> y") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))) False,
    ResTwo ("\\y -> \\x -> x","\\y -> \\x -> y") ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "y")))) False,
    ResTwo ("x (x x)","y (x x)") (((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("x (x x)","y (y y)") (((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("x (x x)","x (y y)") (((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> y y","\\x -> x x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y y","\\y -> x x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y y","\\y -> y y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> y y","\\x -> y x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y y","\\y -> y x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y y","\\x -> x y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> y y","\\y -> x y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("(\\x -> x) (x x)","(\\x -> x) (y y)") (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> y y","\\y -> x x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> y y","\\x -> y y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> y y","\\x -> y x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> y y","\\y -> y x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> y y","\\x -> x y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> y y","\\y -> x y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("(\\x -> x) y","(\\x -> x) x") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")), ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("(\\x -> x) x","(\\x -> x) y") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")), ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("x x (\\x -> x)","y y (\\x -> x)") ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))), (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> y x","\\x -> x x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y x","\\y -> x x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y x","\\x -> y y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> y x","\\y -> y y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> y x","\\y -> y x") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\x -> y x","\\x -> x y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\x -> y x","\\y -> x y") ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("y (\\x -> x)","x (\\x -> x)") (((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))), ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    ResTwo ("\\y -> y x","\\x -> x x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> y x","\\y -> x x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> y x","\\x -> y y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> y x","\\y -> y y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> y x","\\x -> y x") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("\\y -> y x","\\x -> x y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("\\y -> y x","\\y -> x y") ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    ResTwo ("x (\\x -> x)","y (\\x -> x)") (((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))), ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> \\y -> x","\\x -> \\x -> x") ((bindToLam "x"(bindToLam "y"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> \\y -> x","\\y -> \\x -> x") ((bindToLam "x"(bindToLam "y"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "x"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> \\y -> x","\\y -> \\y -> x") ((bindToLam "x"(bindToLam "y"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "x")))) False,
    ResTwo ("\\x -> \\y -> x","\\x -> \\x -> y") ((bindToLam "x"(bindToLam "y"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))) False,
    ResTwo ("\\x -> \\y -> x","\\x -> \\y -> y") ((bindToLam "x"(bindToLam "y"(mkFreeVar "x"))), (bindToLam "x"(bindToLam "y"(mkFreeVar "y")))) False,
    ResTwo ("\\x -> \\y -> x","\\y -> \\y -> y") ((bindToLam "x"(bindToLam "y"(mkFreeVar "x"))), (bindToLam "y"(bindToLam "y"(mkFreeVar "y")))) False,
    ResTwo ("y y (y y)","x x (x x)") ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    ResTwo ("(\\x -> x) (\\x -> x)","\\x -> x") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))), (bindToLam "x"(mkFreeVar "x"))) False,
    ResTwo ("(\\x -> x) (x x)","x x") (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("(\\x -> x) z","z") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")), (mkFreeVar "z")) False,
    ResTwo ("(\\x -> x) y","y") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")), (mkFreeVar "y")) False,
    ResTwo ("(\\x -> x) x","x") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")), (mkFreeVar "x")) False,
    ResTwo ("(\\x -> x) (y y)","y y") (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("(\\z -> x) (\\z -> x)","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))), (mkFreeVar "x")) False,
    ResTwo ("(\\z -> x) (y y)","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))), (mkFreeVar "x")) False,
    ResTwo ("(\\z -> x) (\\x -> x)","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))), (mkFreeVar "x")) False,
    ResTwo ("(\\z -> x) (x x)","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))), (mkFreeVar "x")) False,
    ResTwo ("(\\z -> x) z","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")), (mkFreeVar "x")) False,
    ResTwo ("(\\z -> x) y","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")), (mkFreeVar "x")) False,
    ResTwo ("(\\z -> x) x","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")), (mkFreeVar "x")) False,
    ResTwo ("(\\x -> x) (\\z -> x)","\\z -> x") (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))), (bindToLam "z"(mkFreeVar "x"))) False,
    ResTwo ("(\\z -> x) (y x)","x") (((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), (mkFreeVar "x")) False,
    ResTwo ("(\\x -> x) (y x)","y x") (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))), ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) False,
    ResTwo ("(\\y -> x) (x y)","x") (((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))), (mkFreeVar "x")) False,
    ResTwo ("(\\x -> x) (x y)","x y") (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))), ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) False,
    ResTwo ("(\\x -> y) (\\x -> y)","y") (((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "y"))), (mkFreeVar "y")) False,
    ResTwo ("(\\x -> y) (x y)","y") (((bindToLam "x"(mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))), (mkFreeVar "y")) False]
    
data Res a = Res String Term a

freeVarsRes = 
    [Res "x" (mkFreeVar "x") (fromList ["x"]),
    Res "y" (mkFreeVar "y") (fromList ["y"]),
    Res "z" (mkFreeVar "z") (fromList ["z"]),
    Res "x x" ((mkFreeVar "x") `mkApp` (mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> x" (bindToLam "x"(mkFreeVar "x")) (fromList []),
    Res "y y" ((mkFreeVar "y") `mkApp` (mkFreeVar "y")) (fromList ["y"]),
    Res "\\z -> x" (bindToLam "z"(mkFreeVar "x")) (fromList ["x"]),
    Res "y x" ((mkFreeVar "y") `mkApp` (mkFreeVar "x")) (fromList ["x","y"]),
    Res "x y" ((mkFreeVar "x") `mkApp` (mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> y" (bindToLam "x"(mkFreeVar "y")) (fromList ["y"]),
    Res "z z" ((mkFreeVar "z") `mkApp` (mkFreeVar "z")) (fromList ["z"]),
    Res "z y" ((mkFreeVar "z") `mkApp` (mkFreeVar "y")) (fromList ["y","z"]),
    Res "z x" ((mkFreeVar "z") `mkApp` (mkFreeVar "x")) (fromList ["x","z"]),
    Res "\\x -> z" (bindToLam "x"(mkFreeVar "z")) (fromList ["z"]),
    Res "y z" ((mkFreeVar "y") `mkApp` (mkFreeVar "z")) (fromList ["y","z"]),
    Res "x z" ((mkFreeVar "x") `mkApp` (mkFreeVar "z")) (fromList ["x","z"]),
    Res "x x (x x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x"]),
    Res "\\x -> x x" (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList []),
    Res "x x z" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) (fromList ["x","z"]),
    Res "\\z -> x x" (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x"]),
    Res "x x y" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) (fromList ["x","y"]),
    Res "x x x" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> \\x -> x" (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) (fromList []),
    Res "z (x x)" ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x","z"]),
    Res "y (x x)" ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "x (x x)" ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x"]),
    Res "\\x -> y y" (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["y"]),
    Res "(\\x -> x) (\\x -> x)" ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList []),
    Res "(\\x -> x) (x x)" ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x"]),
    Res "(\\x -> x) z" ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) (fromList ["z"]),
    Res "\\x -> \\z -> x" (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) (fromList []),
    Res "(\\x -> x) y" ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) (fromList ["y"]),
    Res "\\z -> \\z -> x" (bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) (fromList ["x"]),
    Res "(\\x -> x) x" ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) (fromList ["x"]),
    Res "x x (\\x -> x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["x"]),
    Res "\\x -> y x" (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["y"]),
    Res "z (\\x -> x)" ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["z"]),
    Res "\\z -> y x" (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "y (\\x -> x)" ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["y"]),
    Res "\\y -> y x" (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x"]),
    Res "x (\\x -> x)" ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["x"]),
    Res "y y (y y)" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["y"]),
    Res "y y (\\x -> x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["y"]),
    Res "y y (x x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "\\x -> x y" (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) (fromList ["y"]),
    Res "y y z" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) (fromList ["y","z"]),
    Res "\\z -> x y" (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) (fromList ["x","y"]),
    Res "y y y" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")) (fromList ["y"]),
    Res "\\y -> x y" (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) (fromList ["x"]),
    Res "y y x" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\x -> \\x -> y" (bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) (fromList ["y"]),
    Res "(\\x -> x) (y y)" ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["y"]),
    Res "x x (y y)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["x","y"]),
    Res "z (y y)" ((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["y","z"]),
    Res "\\x -> z z" (bindToLam "x"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) (fromList ["z"]),
    Res "y (y y)" ((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["y"]),
    Res "x (y y)" ((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["x","y"]),
    Res "(\\z -> x) (\\z -> x)" ((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x"]),
    Res "(\\z -> x) (y y)" ((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["x","y"]),
    Res "(\\z -> x) (\\x -> x)" ((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["x"]),
    Res "(\\z -> x) (x x)" ((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x"]),
    Res "\\x -> z y" (bindToLam "x"((mkFreeVar "z") `mkApp` (mkFreeVar "y"))) (fromList ["y","z"]),
    Res "(\\z -> x) z" ((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) (fromList ["x","z"]),
    Res "(\\z -> x) y" ((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\y -> z y" (bindToLam "y"((mkFreeVar "z") `mkApp` (mkFreeVar "y"))) (fromList ["z"]),
    Res "(\\z -> x) x" ((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) (fromList ["x"]),
    Res "y y (\\z -> x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x","y"]),
    Res "(\\x -> x) (\\z -> x)" ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x"]),
    Res "x x (\\z -> x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x"]),
    Res "z (\\z -> x)" ((mkFreeVar "z") `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x","z"]),
    Res "y (\\z -> x)" ((mkFreeVar "y") `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x","y"]),
    Res "\\y -> z x" (bindToLam "y"((mkFreeVar "z") `mkApp` (mkFreeVar "x"))) (fromList ["x","z"]),
    Res "x (\\z -> x)" ((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x"]),
    Res "\\x -> \\x -> z" (bindToLam "x"(bindToLam "x"(mkFreeVar "z"))) (fromList ["z"]),
    Res "y x (y x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "y x (\\z -> x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))) (fromList ["x","y"]),
    Res "y x (y y)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) (fromList ["x","y"]),
    Res "\\x -> y z" (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) (fromList ["y","z"]),
    Res "y x (\\x -> x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) (fromList ["x","y"]),
    Res "y x (x x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "\\y -> y z" (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) (fromList ["z"]),
    Res "y x z" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) (fromList ["x","y","z"]),
    Res "y x y" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) (fromList ["x","y"]),
    Res "y x x" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) (fromList ["x","y"]),
    Res "(\\z -> x) (y x)" ((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "y y (y x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "(\\x -> x) (y x)" ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "\\y -> x z" (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "z"))) (fromList ["x","z"]),
    Res "x x (y x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "z (y x)" ((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y","z"]),
    Res "y (y x)" ((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "x (y x)" ((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) (fromList ["x","y"]),
    Res "\\x -> x x (x x)" (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "\\z -> x x (x x)" (bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) (fromList ["x"]),
    Res "\\x -> \\x -> x x" (bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "\\x -> x x z" (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) (fromList ["z"]),
    Res "\\z -> x x z" (bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) (fromList ["x"]),
    Res "\\y -> x x z" (bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) (fromList ["x","z"]),
    Res "\\x -> \\z -> x x" (bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "\\z -> \\z -> x x" (bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) (fromList ["x"]),
    Res "(\\x -> x x) (\\x -> x x)" ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "\\x -> (\\x -> x x) (\\x -> x x)" (bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x (x x)) (\\x -> x x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x (x x)) (\\z -> z z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList []),
    Res "(\\z -> z z) (\\x -> x x (x x))" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "\\x -> \\x -> (\\x -> x x) (\\x -> x x)" (bindToLam "x"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))) (fromList []),
    Res "(\\x -> x x (x x)) (\\x -> \\x -> x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x z) (\\x -> x x z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> x x z) (\\x -> x x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x z) (\\z -> z z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> x x (x x)) (\\x -> x x z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\z -> z z) (\\x -> x x z)" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> \\z -> x x) (\\x -> \\z -> x x)" ((bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> \\z -> x x) (\\x -> x x z)" ((bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> \\z -> x x) (\\x -> x x (x x))" ((bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> \\z -> x x) (\\z -> z z)" ((bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList []),
    Res "(\\x -> x x z) (\\x -> \\z -> x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x (x x)) (\\x -> \\z -> x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\z -> z z) (\\x -> \\z -> x x)" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x y) (\\x -> x x y)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> x x y) (\\x -> \\z -> x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x x y) (\\x -> x x z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["y","z"]),
    Res "(\\x -> x x y) (\\x -> x x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x x y) (\\z -> z z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList ["y"]),
    Res "(\\x -> \\z -> x x) (\\x -> x x y)" ((bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> x x z) (\\x -> x x y)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y","z"]),
    Res "(\\x -> x x (x x)) (\\x -> x x y)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\z -> z z) (\\x -> x x y)" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> x x x) (\\x -> x x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "(\\x -> x x x) (\\x -> \\y -> x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x x) (\\x -> x x y)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> x x x) (\\x -> x x z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> x x x) (\\x -> x x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x x) (\\z -> z z)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList []),
    Res "(\\x -> \\y -> x x) (\\x -> x x x)" ((bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "(\\x -> x x y) (\\x -> x x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList ["y"]),
    Res "(\\x -> x x z) (\\x -> x x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList ["z"]),
    Res "(\\x -> x x (x x)) (\\x -> x x x)" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "(\\z -> z z) (\\x -> x x x)" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "(\\x -> z (x x)) (\\x -> z (x x))" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> z (x x)) (\\x -> x x x)" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList ["z"]),
    Res "(\\x -> z (x x)) (\\x -> \\y -> x x)" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> z (x x)) (\\x -> x x y)" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y","z"]),
    Res "(\\x -> z (x x)) (\\x -> x x z)" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> z (x x)) (\\x -> x x (x x))" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> z (x x)) (\\z -> z z)" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> x x x) (\\x -> z (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> \\y -> x x) (\\x -> z (x x))" ((bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x y) (\\x -> z (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y","z"]),
    Res "(\\x -> x x z) (\\x -> z (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x (x x)) (\\x -> z (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\z -> z z) (\\x -> z (x x))" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> y (x x)) (\\x -> y (x x))" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> y (x x)) (\\x -> z (x x))" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y","z"]),
    Res "(\\x -> y (x x)) (\\x -> x x x)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList ["y"]),
    Res "(\\x -> y (x x)) (\\x -> \\y -> x x)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> y (x x)) (\\x -> x x y)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> y (x x)) (\\x -> x x z)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["y","z"]),
    Res "(\\x -> y (x x)) (\\x -> x x (x x))" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> y (x x)) (\\z -> z z)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList ["y"]),
    Res "(\\x -> z (x x)) (\\x -> y (x x))" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y","z"]),
    Res "(\\x -> x x x) (\\x -> y (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> \\y -> x x) (\\x -> y (x x))" ((bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x x y) (\\x -> y (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x x z) (\\x -> y (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y","z"]),
    Res "(\\x -> x x (x x)) (\\x -> y (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\z -> z z) (\\x -> y (x x))" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x (x x)) (\\x -> x (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x (x x)) (\\x -> y (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x (x x)) (\\x -> z (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x (x x)) (\\x -> x x x)" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "(\\x -> x (x x)) (\\x -> \\y -> x x)" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x (x x)) (\\x -> x x y)" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> x (x x)) (\\x -> x x z)" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> x (x x)) (\\x -> x x (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x (x x)) (\\z -> z z)" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList []),
    Res "(\\x -> y (x x)) (\\x -> x (x x))" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> z (x x)) (\\x -> x (x x))" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x x) (\\x -> x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> \\y -> x x) (\\x -> x (x x))" ((bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x y) (\\x -> x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> x x z) (\\x -> x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x (x x)) (\\x -> x (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\z -> z z) (\\x -> x (x x))" ((bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> (\\x -> x) (x x))" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> (\\x -> x) (x x)) (\\y -> \\z -> y y)" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))) (fromList []),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> x (x x))" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> y (x x))" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> z (x x))" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> x x x)" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))) (fromList []),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> x x y)" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) (fromList ["y"]),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> x x z)" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) (fromList ["z"]),
    Res "(\\x -> (\\x -> x) (x x)) (\\x -> x x (x x))" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> (\\x -> x) (x x)) (\\z -> z z)" ((bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) (fromList []),
    Res "(\\y -> \\z -> y y) (\\x -> (\\x -> x) (x x))" ((bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x (x x)) (\\x -> (\\x -> x) (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> y (x x)) (\\x -> (\\x -> x) (x x))" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"]),
    Res "(\\x -> z (x x)) (\\x -> (\\x -> x) (x x))" ((bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["z"]),
    Res "(\\x -> x x x) (\\x -> (\\x -> x) (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList []),
    Res "(\\x -> x x y) (\\x -> (\\x -> x) (x x))" ((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) (fromList ["y"])]

isClosedRes = 
    [Res "\\x -> x x (\\x -> x)"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))True,
    Res "\\x -> \\z -> \\z -> x x"(bindToLam "x"(bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> \\x -> \\z -> \\z -> x"(bindToLam "x"(bindToLam "x"(bindToLam "z"(bindToLam "z"(mkFreeVar "x")))))True,
    Res "\\y -> \\x -> y y (x x)"(bindToLam "y"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\z -> \\x -> (\\z -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))True,
    Res "\\z -> \\x -> x x (\\z -> x)"(bindToLam "z"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))True,
    Res "\\x -> \\y -> y x y"(bindToLam "x"(bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))True,
    Res "\\x -> \\z -> \\z -> x x (x x)"(bindToLam "x"(bindToLam "z"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> (\\y -> x) (x x (x x))"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\z -> z) (\\x -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\z -> x x) (x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> \\z -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))True,
    Res "\\x -> (\\y -> x) (x x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))True,
    Res "\\z -> (\\y -> z) (\\x -> \\x -> x)"(bindToLam "z"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))True,
    Res "\\x -> \\x -> \\y -> \\z -> y x"(bindToLam "x"(bindToLam "x"(bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> x (x x) (\\z -> z)"(bindToLam "x"(((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))True,
    Res "\\x -> (\\x -> x) (\\x -> x) (x x x)"(bindToLam "x"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> \\x -> \\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))))True,
    Res "\\x -> (\\x -> x) (x x) x"(bindToLam "x"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))True,
    Res "\\x -> x ((\\x -> x) (x x))"(bindToLam "x"((mkFreeVar "x") `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\z -> (\\x -> x) z z"(bindToLam "z"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "z")))True,
    Res "\\x -> (\\x -> \\z -> x) (x (x x))"(bindToLam "x"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\y -> (\\z -> y y) (\\x -> \\z -> x)"(bindToLam "y"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x")))))True,
    Res "\\z -> \\x -> \\x -> z (\\z -> x)"(bindToLam "z"(bindToLam "x"(bindToLam "x"((mkFreeVar "z") `mkApp` (bindToLam "z"(mkFreeVar "x"))))))True,
    Res "\\x -> (\\z -> \\z -> x) (\\z -> z)"(bindToLam "x"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))True,
    Res "\\y -> \\x -> \\x -> y x (y x)"(bindToLam "y"(bindToLam "x"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> \\y -> \\z -> y x (\\z -> x)"(bindToLam "x"(bindToLam "y"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))))True,
    Res "\\x -> \\y -> \\z -> y x (\\x -> x)"(bindToLam "x"(bindToLam "y"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))))True,
    Res "\\x -> x x (\\x -> x) ((\\x -> x) x)"(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> x x (\\x -> x) (x x)"(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> \\y -> \\y -> y x x"(bindToLam "x"(bindToLam "y"(bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> \\y -> \\y -> (\\z -> x) (y x)"(bindToLam "x"(bindToLam "y"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\y -> (\\z -> z) (\\x -> y x)"(bindToLam "y"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> \\y -> \\x -> x x (y x)"(bindToLam "x"(bindToLam "y"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\z -> (\\y -> \\x -> x) (z (\\x -> x))"(bindToLam "z"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))))True,
    Res "\\x -> \\x -> \\x -> \\x -> x x (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))))True,
    Res "\\x -> (\\y -> y x) (x (x x))"(bindToLam "x"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\y -> \\x -> x) (\\y -> y x)"(bindToLam "x"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> x (\\x -> x) ((\\x -> x) (x x))"(bindToLam "x"(((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\x -> x) (x x) (x (\\x -> x))"(bindToLam "x"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))))True,
    Res "\\x -> \\z -> x x (x x) (\\y -> x)"(bindToLam "x"(bindToLam "z"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x")))))True,
    Res "(\\x -> x x (x x)) (\\z -> \\z -> z)"((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "z"))))True,
    Res "\\z -> \\x -> z (x x (x x))"(bindToLam "z"(bindToLam "x"((mkFreeVar "z") `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> \\y -> \\z -> x y (\\y -> x)"(bindToLam "x"(bindToLam "y"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x"))))))True,
    Res "\\z -> \\x -> x z (\\x -> x x)"(bindToLam "z"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\z -> \\x -> z z (\\x -> x x)"(bindToLam "z"(bindToLam "x"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\z -> \\x -> x x z (\\z -> z)"(bindToLam "z"(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"(mkFreeVar "z")))))True,
    Res "\\x -> \\x -> \\z -> \\y -> z (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "z"(bindToLam "y"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))))True,
    Res "\\y -> \\x -> \\x -> (\\y -> x) (x y)"(bindToLam "y"(bindToLam "x"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))))True,
    Res "\\y -> (\\x -> y x) (\\x -> x y)"(bindToLam "y"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))True,
    Res "x x z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))False,
    Res "y (\\x -> x)"((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))False,
    Res "y (y y)"((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))False,
    Res "x (\\z -> x)"((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "x")))False,
    Res "z (y x)"((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))False,
    Res "\\x -> z (x x)"(bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\z -> x (x x)"(bindToLam "z"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "x x (\\x -> y)"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))False,
    Res "z z y"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "y"))False,
    Res "\\y -> \\z -> y x"(bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))False,
    Res "\\x -> y y z"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")))False,
    Res "y y (z y)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))False,
    Res "\\z -> x (y y)"(bindToLam "z"((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))False,
    Res "\\z -> (\\z -> x) (\\x -> x)"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))False,
    Res "x x (z x)"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))False,
    Res "(\\x -> z) (y y)"((bindToLam "x"(mkFreeVar "z")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))False,
    Res "y x (\\x -> z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "z")))False,
    Res "y z (z z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))False,
    Res "(\\y -> y) (y z)"((bindToLam "y"(mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))False,
    Res "z (y z)"((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))False,
    Res "\\z -> y x x"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))False,
    Res "x z (\\z -> y)"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"(mkFreeVar "y")))False,
    Res "(\\z -> z) (x z)"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z")))False,
    Res "x x (x z)"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z")))False,
    Res "x x (x x) (\\z -> y)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "y")))False,
    Res "\\x -> \\z -> x x y"(bindToLam "x"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))False,
    Res "(\\x -> x x) (z x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))False,
    Res "\\z -> \\z -> x x x"(bindToLam "z"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))False,
    Res "y x (\\x -> x x)"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\y -> x y (x x)"(bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\y -> x y y"(bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")))False,
    Res "\\z -> (\\y -> x) (x y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))False,
    Res "z (x x z)"((mkFreeVar "z") `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))False,
    Res "(\\z -> x x) (\\z -> z)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))False,
    Res "\\x -> y (x y)"(bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))False,
    Res "\\x -> (\\x -> y) (\\x -> y)"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))False,
    Res "\\y -> (\\x -> y) (\\y -> x)"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x"))))False,
    Res "x x y (\\z -> y)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "z"(mkFreeVar "y")))False,
    Res "\\y -> (\\x -> y) (x x)"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\z -> (\\x -> y) x"(bindToLam "z"((bindToLam "x"(mkFreeVar "y")) `mkApp` (mkFreeVar "x")))False,
    Res "\\x -> (\\x -> x) (\\x -> y)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))False,
    Res "x x x (\\y -> z)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "y"(mkFreeVar "z")))False,
    Res "(\\x -> y (x x)) (\\x -> x x y)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) False,
    Res "y z (x x x)"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))False,
    Res "(\\x -> \\x -> x) (x x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))False,
    Res "(\\x -> \\x -> x) (x y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))False,
    Res "x x z (\\x -> \\x -> x)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))False,
    Res "y y (\\x -> \\x -> x)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))False,
    Res "z (x x) (\\y -> z)"(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z")))False,
    Res "z (x x) (x x)"(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))False]

isValRes = 
    [Res "x x (x x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) True,
    Res "y (\\x -> x)" ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))) True,
    Res "x (y y)" ((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) True,
    Res "y x z" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) True,
    Res "\\x -> x x y" (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) True,
    Res "y x (x y)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) True,
    Res "x (\\x -> y)" ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "y"))) True,
    Res "y x (z z)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) True,
    Res "\\z -> x (\\x -> x)" (bindToLam "z"((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "z y (x x)" (((mkFreeVar "z") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) True,
    Res "z (z y)" ((mkFreeVar "z") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))) True,
    Res "z x (x y)" (((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) True,
    Res "y (z x)" ((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))) True,
    Res "\\z -> z (\\z -> x)" (bindToLam "z"((mkFreeVar "z") `mkApp` (bindToLam "z"(mkFreeVar "x")))) True,
    Res "\\z -> x (\\z -> x)" (bindToLam "z"((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "x")))) True,
    Res "x y (y z)" (((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) True,
    Res "\\y -> y x (x x)" (bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "x z (\\x -> z)" (((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"(mkFreeVar "z"))) True,
    Res "x z z" (((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "z")) True,
    Res "x x (x z)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z"))) True,
    Res "x x (x x) (\\z -> z)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))) True,
    Res "\\x -> \\x -> x x y" (bindToLam "x"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) True,
    Res "\\y -> x y (x y)" (bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) True,
    Res "x y (\\x -> x x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "x x z (\\y -> z)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "y"(mkFreeVar "z"))) True,
    Res "x x z (x y)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) True,
    Res "x x (x x) (x x z)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) True,
    Res "\\z -> y y (x y)" (bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) True,
    Res "\\z -> x (x y)" (bindToLam "z"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) True,
    Res "\\x -> \\x -> \\x -> y y" (bindToLam "x"(bindToLam "x"(bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))) True,
    Res "x x y (y y)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) True,
    Res "y (x x y)" ((mkFreeVar "y") `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) True,
    Res "\\z -> x (\\x -> y)" (bindToLam "z"((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "y")))) True,
    Res "x x x (z z)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) True,
    Res "\\y -> z z (y x)" (bindToLam "y"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) True,
    Res "z (x x x)" ((mkFreeVar "z") `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) True,
    Res "y z (\\x -> \\x -> x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))) True,
    Res "x (\\x -> \\x -> x)" ((mkFreeVar "x") `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))) True,
    Res "z (x x) (z x)" (((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))) True,
    Res "\\y -> x (z z)" (bindToLam "y"((mkFreeVar "x") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))) True,
    Res "\\z -> \\y -> \\z -> y x" (bindToLam "z"(bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))) True,
    Res "y (x x) (\\y -> x x)" (((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "y (x x) (y y)" (((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) True,
    Res "y x (y (x x))" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "\\x -> z y (x y)" (bindToLam "x"(((mkFreeVar "z") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) True,
    Res "\\y -> z y (\\x -> x)" (bindToLam "y"(((mkFreeVar "z") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "\\x -> \\z -> \\z -> x y" (bindToLam "x"(bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))) True,
    Res "\\x -> \\x -> y y y" (bindToLam "x"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")))) True,
    Res "x x x (x (x x))" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "\\y -> y y (z y)" (bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))) True,
    Res "\\z -> x (z y)" (bindToLam "z"((mkFreeVar "x") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))) True,
    Res "y y (\\x -> y y)" (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    Res "\\y -> z x (z x)" (bindToLam "y"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))) True,
    Res "\\z -> z x (y y)" (bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    Res "\\x -> y x (z x)" (bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))) True,
    Res "\\z -> \\z -> y y (\\z -> x)" (bindToLam "z"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))) True,
    Res "z y (\\x -> \\z -> x)" (((mkFreeVar "z") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x")))) True,
    Res "\\z -> y x (\\x -> z)" (bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "z")))) True,
    Res "\\y -> y z (y z)" (bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))) True,
    Res "\\y -> \\y -> \\y -> z x" (bindToLam "y"(bindToLam "y"(bindToLam "y"((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))) True,
    Res "\\y -> y z (y y)" (bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    Res "\\x -> \\z -> y x (y x)" (bindToLam "x"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))) True,
    Res "x (\\z -> \\z -> x)" ((mkFreeVar "x") `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "x")))) True,
    Res "\\y -> x y (y z)" (bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))) True,
    Res "\\y -> x x (y z)" (bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))) True,
    Res "\\y -> \\x -> y x (x x)" (bindToLam "y"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) True,
    Res "x x (\\x -> x) (\\y -> \\z -> x)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x")))) True,
    Res "x x (\\x -> x) (\\z -> z)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))) True,
    Res "x x (\\x -> x) x" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "x")) True,
    Res "z y (x x (\\x -> x))" (((mkFreeVar "z") `mkApp` (mkFreeVar "y")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "x (x x) (\\x -> y x)" (((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) True,
    Res "z z (\\x -> y x)" (((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) True,
    Res "\\x -> x z (\\z -> y)" (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"(mkFreeVar "y")))) True,
    Res "z (\\x -> x) (x x z)" (((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) True,
    Res "z (\\x -> x) (z z)" (((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) True,
    Res "\\z -> \\x -> z (y x)" (bindToLam "z"(bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))) True,
    Res "\\x -> x z y" (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "y"))) True,
    Res "y (z (\\x -> x))" ((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "\\x -> \\y -> x (y x)" (bindToLam "x"(bindToLam "y"((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))) True,
    Res "x x y (\\z -> y x)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) True,
    Res "x x (\\z -> y x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) True,
    Res "y (\\x -> x) (x (x x))" (((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "y (\\x -> x) (x y)" (((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) True,
    Res "x x (x x) (y (\\x -> x))" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "\\x -> \\x -> \\x -> x x z" (bindToLam "x"(bindToLam "x"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))) True,
    Res "x x (\\y -> y x)" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) True,
    Res "x (\\x -> x) (\\z -> y y)" (((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    Res "\\x -> \\x -> \\y -> x x z" (bindToLam "x"(bindToLam "x"(bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))) True,
    Res "\\x -> x x (x x) (x x (x x))" (bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) True,
    Res "x x y (x (\\x -> x))" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "x x (x (\\x -> x))" (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))) True,
    Res "\\x -> x x (x x) (\\y -> x)" (bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x")))) True,
    Res "\\z -> x z (x x (x x))" (bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) True,
    Res "\\y -> z x (x x (x x))" (bindToLam "y"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) True,
    Res "y y (y y) (x x (x x))" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) True,
    Res "y y (y y) (y y)" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) True,
    Res "\\x -> x x (x x (x x))" (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) True,
    Res "y x (y y (y y))" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    Res "y y (\\x -> x) (\\z -> \\y -> x)" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(bindToLam "y"(mkFreeVar "x")))) True,
    Res "y y (\\x -> x) (\\z -> y y)" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) True,
    Res "(\\y -> x) (x y)" ((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) False,
    Res "\\x -> (\\x -> x) z" (bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) False,
    Res "\\z -> (\\z -> x) (\\x -> x)" (bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "\\x -> (\\z -> x) x" (bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\z -> y) (y z)" ((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) False,
    Res "(\\x -> x x) (x x (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\y -> z) (\\x -> x x)" ((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\z -> x x) (\\y -> z)" ((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))) False,
    Res "(\\z -> x x) x" ((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")) False,
    Res "\\x -> \\x -> (\\x -> x) (\\x -> x)" (bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))) False,
    Res "\\x -> (\\y -> x) (\\x -> y)" (bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))) False,
    Res "(\\x -> \\x -> x) (x x x)" ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\x -> \\x -> x) (y x)" ((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) False,
    Res "(\\y -> x x) (z (x x))" ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "\\x -> (\\y -> x) (z y)" (bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))) False,
    Res "(\\x -> y y) (x x y)" ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) False,
    Res "(\\x -> y y) (x x)" ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) False,
    Res "(\\x -> x) (\\x -> x) (x x x)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\x -> x) (\\x -> x) (y y)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) False,
    Res "x z ((\\x -> x) (\\x -> x))" (((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\x -> x) (x x) ((\\x -> x) (x x))" (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x) (x x) (y z)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) False,
    Res "\\y -> \\z -> (\\z -> x) (y y)" (bindToLam "y"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))) False,
    Res "(\\z -> z) ((\\x -> x) (x x))" ((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "\\y -> (\\y -> y) (z x)" (bindToLam "y"((bindToLam "y"(mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x) z ((\\x -> x) (x x))" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x) z (z x)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))) False,
    Res "(\\x -> x) z x" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "x")) False,
    Res "x x (x x) ((\\x -> x) z)" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) False,
    Res "y x ((\\x -> x) z)" (((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) False,
    Res "(\\x -> \\z -> x) (\\y -> \\x -> x)" ((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\x -> \\z -> x) (\\z -> y)" ((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "y"))) False,
    Res "(\\z -> y y) (\\x -> \\z -> x)" ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x")))) False,
    Res "(\\x -> x) y (\\y -> y y)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    Res "(\\x -> x) y (y z)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))) False,
    Res "(\\z -> y y) ((\\x -> x) y)" ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) False,
    Res "(\\z -> y) ((\\x -> x) y)" ((bindToLam "z"(mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) False,
    Res "(\\z -> \\z -> x) ((\\x -> x) (\\x -> x))" ((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\z -> \\z -> x) (z z)" ((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) False,
    Res "(\\y -> x x) (\\z -> \\z -> x)" ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "x")))) False,
    Res "(\\x -> x) x (\\y -> \\x -> x)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\x -> x) x (z y)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))) False,
    Res "(\\z -> y y) ((\\x -> x) x)" ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    Res "y z ((\\x -> x) x)" (((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    Res "x x (\\x -> x) ((\\x -> x) (\\x -> x))" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\x -> y x) (x x (\\x -> x))" ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "\\x -> \\y -> (\\z -> x) (y x)" (bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))) False,
    Res "(\\x -> y x) (x y)" ((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) False,
    Res "(\\y -> \\x -> x) (\\x -> y x)" ((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    Res "z (\\x -> x) ((\\x -> x) (\\x -> x))" (((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "\\y -> (\\z -> z) (x z)" (bindToLam "y"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z")))) False,
    Res "(\\z -> y x) (y (x x))" ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\z -> y x) (z z)" ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))) False,
    Res "(\\x -> x) (x x) (\\z -> y x)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x) x (y (\\x -> x))" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\y -> y x) (z (\\x -> x))" ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\y -> y x) (\\y -> x x)" ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\y -> y x) z" ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "z")) False,
    Res "(\\z -> z) (\\y -> y x)" ((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x) (x x) (x (\\x -> x))" (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "y y (y y) ((\\x -> x) (x x))" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x) (\\x -> x) (y y (y y))" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    Res "\\z -> (\\x -> x x) (y z)" (bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))) False,
    Res "y y (\\x -> x) ((\\x -> x) y)" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y"))) False,
    Res "(\\y -> y y) (y y (\\x -> x))" ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\y -> \\y -> x) (y y (x x))" ((bindToLam "y"(bindToLam "y"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "\\x -> (\\y -> z) (x x z)" (bindToLam "x"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))) False,
    Res "(\\x -> x y) (\\x -> x y)" ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    Res "(\\x -> x y) ((\\x -> x) (x x))" ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> x y) (\\z -> z)" ((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))) False,
    Res "(\\y -> \\y -> x) (\\x -> x y)" ((bindToLam "y"(bindToLam "y"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    Res "\\z -> (\\z -> x x) (\\z -> x x)" (bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) False,
    Res "\\x -> (\\z -> x x) (x z)" (bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z")))) False,
    Res "\\x -> (\\z -> x x) (z y)" (bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))) False,
    Res "(\\x -> x) y (y y z)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z"))) False,
    Res "(\\y -> x) (y y z)" ((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z"))) False,
    Res "\\x -> (\\z -> x x) x" (bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\z -> x y) (x (x x))" ((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "\\x -> (\\z -> z) (\\z -> x x)" (bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) False,
    Res "(\\y -> y x) (\\z -> x y)" ((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    Res "\\x -> (\\y -> x) (\\z -> x x)" (bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))) False,
    Res "y y y ((\\x -> x) (\\x -> x))" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\x -> x) z (y y y)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y"))) False,
    Res "(\\y -> x y) (y y (x x))" ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\y -> x y) ((\\x -> x) (x x))" ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\y -> x y) (z x)" ((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))) False,
    Res "\\z -> (\\z -> x x) (x x y)" (bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) False,
    Res "(\\x -> x) (\\x -> x) (\\y -> x y)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))) False,
    Res "y y x ((\\x -> x) x)" ((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\z -> y x) (y y x)" ((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\x -> \\x -> y) (y y x)" ((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))) False,
    Res "(\\x -> \\x -> y) (y (\\x -> x))" ((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))) False,
    Res "(\\x -> \\x -> y) (y (x x))" ((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) False,
    Res "(\\x -> \\x -> y) (\\y -> x)" ((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` (bindToLam "y"(mkFreeVar "x"))) False,
    Res "(\\x -> x) z (\\x -> \\x -> y)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))) False,
    Res "(\\x -> x) (y y) (y y z)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z"))) False,
    Res "(\\x -> x) (y y) ((\\x -> x) z)" (((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))) False,
    Res "(\\x -> y (x x)) (\\x -> x x y)" ((bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))) False,
    Res "(\\z -> x y) ((\\x -> x) (y y))" ((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False,
    Res "x x (\\x -> x) ((\\x -> x) (y y))" ((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))) False]

evalRes = 
    [Res "(\\y -> x) (x y)"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))(mkFreeVar "x"),
    Res "\\x -> (\\x -> x) z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(bindToLam "x"(mkFreeVar "z")),
    Res "\\z -> (\\z -> x) (\\x -> x)"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> y) (y z)"((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))(mkFreeVar "y"),
    Res "(\\x -> x x) (\\y -> z)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z")))(mkFreeVar "z"),
    Res "(\\z -> z) (\\x -> x x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\x -> x) (x y)"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))),
    Res "(\\x -> x x) (\\z -> x x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "\\x -> (\\x -> y) (\\x -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "\\z -> (\\y -> x) (\\x -> y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\y -> x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (y y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) (z (x x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\z -> (\\y -> x) (z y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> y y) (x x z)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> y y) z"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (mkFreeVar "z"))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) (\\x -> x) (\\y -> x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> z) ((\\x -> x) (\\x -> x))"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\z -> \\z -> (\\z -> x) (\\z -> x)"(bindToLam "z"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "z"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x) (x x) (z x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))),
    Res "(\\z -> y y) ((\\x -> x) (x x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "y z ((\\x -> x) (x x))"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> y) (z x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> x) z (\\z -> y y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))((mkFreeVar "z") `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))),
    Res "\\x -> (\\x -> z) (\\x -> z)"(bindToLam "x"((bindToLam "x"(mkFreeVar "z")) `mkApp` (bindToLam "x"(mkFreeVar "z"))))(bindToLam "x"(mkFreeVar "z")),
    Res "(\\y -> y y) ((\\x -> x) z)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((mkFreeVar "z") `mkApp` (mkFreeVar "z")),
    Res "(\\y -> z) ((\\x -> x) z)"((bindToLam "y"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(mkFreeVar "z"),
    Res "y y ((\\x -> x) z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")),
    Res "(\\x -> \\z -> x) (y (x x))"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (z z)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))(bindToLam "z'"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))),
    Res "(\\x -> x) (\\x -> x) (\\x -> \\z -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x) y ((\\x -> x) (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) y (z x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) ((\\x -> x) y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))(mkFreeVar "y"),
    Res "z z ((\\x -> x) y)"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "y")),
    Res "(\\z -> \\z -> x) (x (x x))"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\z -> \\z -> x) (x y)"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\y -> z) (\\z -> \\z -> x)"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "x"))))(mkFreeVar "z"),
    Res "(\\x -> x) x (y (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> x) x (\\z -> y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "y")))((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "y"))),
    Res "\\x -> (\\y -> x) (y z)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))))(bindToLam "x"(mkFreeVar "x")),
    Res "z x ((\\x -> x) x)"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")),
    Res "(\\y -> \\z -> x) (x x (\\x -> x))"((bindToLam "y"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> y x) (\\y -> \\z -> x)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> y x) (y (x x))"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> y x) (\\y -> x)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x")))((mkFreeVar "y") `mkApp` (bindToLam "y"(mkFreeVar "x"))),
    Res "(\\y -> x x) (\\x -> y x)"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "(\\x -> y x) (z (\\x -> x))"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\z -> y x) (\\z -> y x)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y x) (z (x x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y x) (x y)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y y) (\\z -> y x)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) y (y (\\x -> x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\y -> y x) (\\x -> y x)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\y -> y x) (x x y)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")),
    Res "(\\y -> y x) y"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "y"))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y) (\\y -> y x)"((bindToLam "z"(mkFreeVar "y")) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))(mkFreeVar "y"),
    Res "(\\z -> y y) (x (\\x -> x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "y y (y y) ((\\x -> x) (\\x -> x))"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(mkFreeVar "x"))),
    Res "(\\z -> \\x -> x) (y y (y y))"((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\z -> (\\x -> x x) (z x)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))(bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))),
    Res "y y (\\x -> x) ((\\x -> x) z)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "z")),
    Res "(\\z -> y y) (y y (\\x -> x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\y -> y x) (y y (x x))"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")),
    Res "\\y -> (\\y -> z) (x x z)"(bindToLam "y"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "y"(mkFreeVar "z")),
    Res "(\\x -> x y) (\\y -> \\y -> x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "y"(bindToLam "y"(mkFreeVar "x"))))(bindToLam "y"(mkFreeVar "x")),
    Res "(\\x -> x y) ((\\x -> x) (\\x -> x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(mkFreeVar "y"),
    Res "(\\x -> x y) (z x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")),
    Res "(\\y -> y x) (\\x -> x y)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "\\x -> (\\z -> x x) (x x z)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "y y z ((\\x -> x) x)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "x")),
    Res "\\y -> (\\z -> x x) (z y)"(bindToLam "y"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))))(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\y -> y y) (y y z)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z"))),
    Res "\\z -> (\\z -> x x) (x x)"(bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\z -> x x) x"(bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\z -> x y) (\\z -> \\x -> x)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "(\\z -> x y) (z y)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> y x) (\\z -> x y)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))((mkFreeVar "y") `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))),
    Res "(\\z -> y) (\\z -> x y)"((bindToLam "z"(mkFreeVar "y")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))(mkFreeVar "y"),
    Res "\\y -> \\y -> (\\x -> y) (\\y -> x)"(bindToLam "y"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "y"(bindToLam "y"(mkFreeVar "y"))),
    Res "(\\x -> x) (x x) (y y y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y"))),
    Res "(\\y -> x y) (y y (\\x -> x))"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\y -> x y) ((\\x -> x) (\\x -> x))"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))),
    Res "(\\y -> x y) (\\z -> y)"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(mkFreeVar "y")))((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "y"))),
    Res "\\x -> \\x -> (\\x -> y) (x x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "y"))),
    Res "\\x -> (\\y -> z) (x x y)"(bindToLam "x"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))(bindToLam "x"(mkFreeVar "z")),
    Res "y y x ((\\x -> x) y)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) x (y y x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")))((mkFreeVar "x") `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\y -> x) (\\x -> y)"(bindToLam "x"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\y -> \\y -> (\\y -> x) (\\x -> y)"(bindToLam "y"(bindToLam "y"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))))(bindToLam "y"(bindToLam "y"(mkFreeVar "x"))),
    Res "(\\x -> \\x -> y) (z (x x))"((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> \\x -> y) (y y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> x) (x x) (\\x -> \\x -> y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y"))))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))),
    Res "(\\x -> x) (y y) (y y (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> x) (y y) ((\\x -> x) (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (y y) (z y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "z")))),
    Res "(\\x -> x) y ((\\x -> x) (y y))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))),
    Res "(\\x -> x) (\\x -> x)"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> x) (x x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\x -> x) z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) (\\x -> x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) (x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x) (\\z -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x x) (\\z -> z)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "(\\z -> z) (\\x -> x x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "x")))),
    Res "\\x -> \\x -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\z -> \\x -> (\\x -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "z"))),
    Res "\\z -> \\z -> (\\x -> x) z"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "z"(mkFreeVar "z"))),
    Res "(\\x -> \\x -> x) (\\x -> \\x -> x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\x -> x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\z -> z)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) (\\x -> \\x -> x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> z) (\\x -> \\x -> x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x) (\\x -> x) (\\y -> \\x -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (\\x -> x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (\\z -> z)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "(\\y -> \\x -> x) ((\\x -> x) (\\x -> x))"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) ((\\x -> x) (\\x -> x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> z) ((\\x -> x) (\\x -> x))"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> \\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\z -> x) (y y)"(bindToLam "y"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\z -> x) (y y)"(bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\z -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (\\x -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) (x x)"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (x x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) z"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) x"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) x"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> \\z -> x) (\\x -> \\z -> x)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (\\y -> y y)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))(bindToLam "z"(bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))),
    Res "(\\x -> \\z -> x) ((\\x -> x) (\\x -> x))"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> \\z -> x) (\\y -> \\x -> x)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "y"(bindToLam "x"(mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (\\z -> z)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(bindToLam "z"(mkFreeVar "z"))),
    Res "(\\y -> y y) (\\x -> \\z -> x)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> x) (\\x -> x) (\\x -> \\z -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\y -> \\x -> x) (\\x -> \\z -> x)"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> \\x -> (\\x -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "\\x -> \\z -> (\\x -> x) (\\z -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\z -> z) (\\x -> \\z -> x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\z -> x) (y x)"(bindToLam "y"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\z -> x) (y x)"(bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\x -> x) (y x)"(bindToLam "y"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> \\y -> (\\x -> x) (y x)"(bindToLam "x"(bindToLam "y"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\z -> z) (x x (x x))"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\y -> x) (x x (x x))"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x x) (x x (x x))"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\z -> (\\x -> x x) (\\y -> z)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\x -> x x) (\\z -> z)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "z"))),
    Res "\\z -> (\\x -> x x) (z z)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))))(bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))),
    Res "\\z -> (\\x -> x x) z"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "z")))(bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))),
    Res "\\z -> (\\y -> z) (\\x -> x x)"(bindToLam "z"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\z -> z) (\\x -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\y -> \\x -> (\\y -> x) (x y)"(bindToLam "y"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\y -> x) (x y)"(bindToLam "x"(bindToLam "y"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\z -> x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\x -> x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (x x (x x))"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\z -> z)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\y -> x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) x"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (\\z -> x x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> z) (\\z -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\y -> x) (\\z -> x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\y -> \\x -> (\\x -> y) (\\y -> x)"(bindToLam "y"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "y"))),
    Res "\\x -> \\y -> (\\x -> y) (\\y -> x)"(bindToLam "x"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "y"))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\x -> \\x -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\x -> \\z -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\z -> \\x -> \\x -> (\\x -> x) z"(bindToLam "z"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "z"(bindToLam "x"(bindToLam "x"(mkFreeVar "z")))),
    Res "\\x -> \\z -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "x"(bindToLam "z"(bindToLam "x"(mkFreeVar "z")))),
    Res "\\z -> \\z -> \\z -> (\\x -> x) z"(bindToLam "z"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "z"(bindToLam "z"(bindToLam "z"(mkFreeVar "z")))),
    Res "\\x -> (\\y -> x x) (x x x)"(bindToLam "x"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (x x x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\z -> z) (x x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\y -> x) (x x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> \\x -> x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (x x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\y -> x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\x -> x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (x x (x x))"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) (\\y -> z)"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\z -> z)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) (z z)"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) z"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "z")))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\y -> x x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x")))]
    