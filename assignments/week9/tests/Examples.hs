module Examples where
import LambdaCalcImplementation

import Data.Set (Set, fromList)

alphaEq = 
    [("x",mkFreeVar "x","x",mkFreeVar "x",True),
    ("y",mkFreeVar "y","y",mkFreeVar "y",True),
    ("z",mkFreeVar "z","z",mkFreeVar "z",True),
    ("x x",mkFreeVar "x" `mkApp` mkFreeVar "x","x x",mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("\\x -> x",bindToLam "x" $ mkFreeVar "x","\\x -> x",bindToLam "x" $ mkFreeVar "x",True),
    ("\\x -> x",bindToLam "x" $ mkFreeVar "x","\\y -> y",bindToLam "y" $ mkFreeVar "y",True),
    ("\\x -> x",bindToLam "x" $ mkFreeVar "x","\\z -> z",bindToLam "z" $ mkFreeVar "z",True),
    ("y y",mkFreeVar "y" `mkApp` mkFreeVar "y","y y",mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("\\z -> x",bindToLam "z" $ mkFreeVar "x","\\z -> x",bindToLam "z" $ mkFreeVar "x",True),
    ("\\z -> x",bindToLam "z" $ mkFreeVar "x","\\y -> x",bindToLam "y" $ mkFreeVar "x",True),
    ("z z",mkFreeVar "z" `mkApp` mkFreeVar "z","z z",mkFreeVar "z" `mkApp` mkFreeVar "z",True),
    ("\\y -> x",bindToLam "y" $ mkFreeVar "x","\\z -> x",bindToLam "z" $ mkFreeVar "x",True),
    ("\\y -> x",bindToLam "y" $ mkFreeVar "x","\\y -> x",bindToLam "y" $ mkFreeVar "x",True),
    ("x x (x x)",mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"),"x x (x x)",mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"),True),
    ("\\x -> y",bindToLam "x" $ mkFreeVar "y","\\x -> y",bindToLam "x" $ mkFreeVar "y",True),
    ("\\x -> y",bindToLam "x" $ mkFreeVar "y","\\z -> y",bindToLam "z" $ mkFreeVar "y",True),
    ("(\\x -> x) (\\x -> x)",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"),"(\\x -> x) (\\x -> x)",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"),True),
    ("(\\x -> x) (\\x -> x)",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"),"(\\y -> y) (\\y -> y)",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y"),True),
    ("(\\x -> x) (\\x -> x)",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"),"(\\z -> z) (\\z -> z)",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z"),True),
    ("\\z -> y",bindToLam "z" $ mkFreeVar "y","\\x -> y",bindToLam "x" $ mkFreeVar "y",True),
    ("\\z -> y",bindToLam "z" $ mkFreeVar "y","\\z -> y",bindToLam "z" $ mkFreeVar "y",True),
    ("y y (y y)",mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y"),"y y (y y)",mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y"),True),
    ("\\y -> y",bindToLam "y" $ mkFreeVar "y","\\x -> x",bindToLam "x" $ mkFreeVar "x",True),
    ("\\y -> y",bindToLam "y" $ mkFreeVar "y","\\y -> y",bindToLam "y" $ mkFreeVar "y",True),
    ("\\y -> y",bindToLam "y" $ mkFreeVar "y","\\z -> z",bindToLam "z" $ mkFreeVar "z",True),
    ("(\\z -> x) (\\z -> x)",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x"),"(\\z -> x) (\\z -> x)",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x"),True),
    ("(\\z -> x) (\\z -> x)",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x"),"(\\y -> x) (\\y -> x)",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x"),True),
    ("\\x -> z",bindToLam "x" $ mkFreeVar "z","\\x -> z",bindToLam "x" $ mkFreeVar "z",True),
    ("\\x -> z",bindToLam "x" $ mkFreeVar "z","\\y -> z",bindToLam "y" $ mkFreeVar "z",True),
    ("z z (z z)",mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z"),"z z (z z)",mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z"),True),
    ("\\z -> z",bindToLam "z" $ mkFreeVar "z","\\x -> x",bindToLam "x" $ mkFreeVar "x",True),
    ("\\z -> z",bindToLam "z" $ mkFreeVar "z","\\y -> y",bindToLam "y" $ mkFreeVar "y",True),
    ("\\z -> z",bindToLam "z" $ mkFreeVar "z","\\z -> z",bindToLam "z" $ mkFreeVar "z",True),
    ("(\\y -> x) (\\y -> x)",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x"),"(\\z -> x) (\\z -> x)",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x"),True),
    ("(\\y -> x) (\\y -> x)",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x"),"(\\y -> x) (\\y -> x)",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x"),True),
    ("\\y -> z",bindToLam "y" $ mkFreeVar "z","\\x -> z",bindToLam "x" $ mkFreeVar "z",True),
    ("\\y -> z",bindToLam "y" $ mkFreeVar "z","\\y -> z",bindToLam "y" $ mkFreeVar "z",True),
    ("x x (x x) (x x (x x))",mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")),"x x (x x) (x x (x x))",mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")),True),
    ("\\x -> x x",bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\x -> x x",bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("\\x -> x x",bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\y -> y y",bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("\\x -> x x",bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\z -> z z",bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z",True),
    ("(\\x -> y) (\\x -> y)",bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y"),"(\\x -> y) (\\x -> y)",bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y"),True),
    ("(\\x -> y) (\\x -> y)",bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y"),"(\\z -> y) (\\z -> y)",bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y"),True),
    ("\\z -> x x",bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\z -> x x",bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("\\z -> x x",bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\y -> x x",bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")),"(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")),True),
    ("(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")),"(\\y -> y) (\\y -> y) ((\\y -> y) (\\y -> y))",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y") `mkApp` (bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y")),True),
    ("(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")),"(\\z -> z) (\\z -> z) ((\\z -> z) (\\z -> z))",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z") `mkApp` (bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z")),True),
    ("\\y -> x x",bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\z -> x x",bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("\\y -> x x",bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x","\\y -> x x",bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("(\\z -> y) (\\z -> y)",bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y"),"(\\x -> y) (\\x -> y)",bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y"),True),
    ("(\\z -> y) (\\z -> y)",bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y"),"(\\z -> y) (\\z -> y)",bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y"),True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\x -> y",bindToLam "y" $ bindToLam "x" $ mkFreeVar "y",True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\y -> y",bindToLam "x" $ bindToLam "y" $ mkFreeVar "y",True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\z -> \\y -> y",bindToLam "z" $ bindToLam "y" $ mkFreeVar "y",True),
    ("\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\y -> y",bindToLam "y" $ bindToLam "y" $ mkFreeVar "y",True),
    ("y y (y y) (y y (y y))",mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")),"y y (y y) (y y (y y))",mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")),True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\z -> x",bindToLam "x" $ bindToLam "z" $ mkFreeVar "x",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\z -> y",bindToLam "y" $ bindToLam "z" $ mkFreeVar "y",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\y -> y",bindToLam "x" $ bindToLam "y" $ mkFreeVar "y",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\z -> \\y -> y",bindToLam "z" $ bindToLam "y" $ mkFreeVar "y",True),
    ("\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\y -> y",bindToLam "y" $ bindToLam "y" $ mkFreeVar "y",True),
    ("(\\y -> y) (\\y -> y)",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y"),"(\\x -> x) (\\x -> x)",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"),True),
    ("(\\y -> y) (\\y -> y)",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y"),"(\\y -> y) (\\y -> y)",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y"),True),
    ("(\\y -> y) (\\y -> y)",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y"),"(\\z -> z) (\\z -> z)",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z"),True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\x -> x",bindToLam "x" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\z -> \\x -> x",bindToLam "z" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x",True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\y -> x",bindToLam "x" $ bindToLam "y" $ mkFreeVar "x",True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\x -> \\y -> y",bindToLam "x" $ bindToLam "y" $ mkFreeVar "y",True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\z -> \\y -> y",bindToLam "z" $ bindToLam "y" $ mkFreeVar "y",True),
    ("\\y -> \\x -> x",bindToLam "y" $ bindToLam "x" $ mkFreeVar "x","\\y -> \\y -> y",bindToLam "y" $ bindToLam "y" $ mkFreeVar "y",True),
    ("(\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x))",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")),"(\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x))",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")),True),
    ("(\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x))",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")),"(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x))",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")),True),
    ("\\x -> y y",bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\x -> y y",bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("\\x -> y y",bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\z -> y y",bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("(\\x -> z) (\\x -> z)",bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z"),"(\\x -> z) (\\x -> z)",bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z"),True),
    ("(\\x -> z) (\\x -> z)",bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z"),"(\\y -> z) (\\y -> z)",bindToLam "y" $ mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "z"),True),
    ("\\z -> y y",bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\x -> y y",bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("\\z -> y y",bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\z -> y y",bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("z z (z z) (z z (z z))",mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")),"z z (z z) (z z (z z))",mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")),True),
    ("\\y -> y y",bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\x -> x x",bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x",True),
    ("\\y -> y y",bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\y -> y y",bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y",True),
    ("\\y -> y y",bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y","\\z -> z z",bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z",True),
    ("(\\z -> z) (\\z -> z)",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z"),"(\\x -> x) (\\x -> x)",bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"),True),
    ("(\\z -> z) (\\z -> z)",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z"),"(\\y -> y) (\\y -> y)",bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y"),True),
    ("(\\z -> z) (\\z -> z)",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z"),"(\\z -> z) (\\z -> z)",bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z"),True),
    ("\\x -> \\z -> x",bindToLam "x" $ bindToLam "z" $ mkFreeVar "x","\\x -> \\z -> x",bindToLam "x" $ bindToLam "z" $ mkFreeVar "x",True),
    ("\\x -> \\z -> x",bindToLam "x" $ bindToLam "z" $ mkFreeVar "x","\\x -> \\y -> x",bindToLam "x" $ bindToLam "y" $ mkFreeVar "x",True),
    ("\\x -> \\z -> x",bindToLam "x" $ bindToLam "z" $ mkFreeVar "x","\\y -> \\x -> y",bindToLam "y" $ bindToLam "x" $ mkFreeVar "y",True),
    ("\\x -> \\z -> x",bindToLam "x" $ bindToLam "z" $ mkFreeVar "x","\\y -> \\z -> y",bindToLam "y" $ bindToLam "z" $ mkFreeVar "y",True),
    ("(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x))",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")),"(\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x))",bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")),True),
    ("(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x))",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")),"(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x))",bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")),True),
    ("\\z -> \\z -> x",bindToLam "z" $ bindToLam "z" $ mkFreeVar "x","\\z -> \\z -> x",bindToLam "z" $ bindToLam "z" $ mkFreeVar "x",True)]

alphaEq2 =
    [("x", mkFreeVar "x" ,"z z (z z)", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") ,False),
    ("x", mkFreeVar "x" ,"\\x -> y y", bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" ,False),
    ("x", mkFreeVar "x" ,"(\\z -> x x) (\\z -> x x)", bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("x", mkFreeVar "x" ,"\\y -> \\x -> y", bindToLam "y" $ bindToLam "x" $ mkFreeVar "y" ,False),
    ("x", mkFreeVar "x" ,"(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x)) ((\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x)))", bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")) `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x"))) ,False),
    ("y", mkFreeVar "y" ,"x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("y", mkFreeVar "y" ,"\\y -> z", bindToLam "y" $ mkFreeVar "z" ,False),
    ("y", mkFreeVar "y" ,"z z (z z) (z z (z z))", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) ,False),
    ("y", mkFreeVar "y" ,"\\z -> \\y -> x", bindToLam "z" $ bindToLam "y" $ mkFreeVar "x" ,False),
    ("y", mkFreeVar "y" ,"(\\x -> y y) (\\x -> y y)", bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("y", mkFreeVar "y" ,"\\x -> \\y -> y", bindToLam "x" $ bindToLam "y" $ mkFreeVar "y" ,False),
    ("z", mkFreeVar "z" ,"\\z -> x", bindToLam "z" $ mkFreeVar "x" ,False),
    ("z", mkFreeVar "z" ,"(\\x -> y) (\\x -> y)", bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y") ,False),
    ("z", mkFreeVar "z" ,"\\x -> \\z -> x", bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" ,False),
    ("z", mkFreeVar "z" ,"(\\z -> y) (\\z -> y) ((\\z -> y) (\\z -> y))", bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y") `mkApp` (bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y")) ,False),
    ("z", mkFreeVar "z" ,"\\y -> (\\x -> x) (\\x -> x)", bindToLam "y" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,False),
    ("z", mkFreeVar "z" ,"(\\y -> \\z -> x) (\\y -> \\z -> x)", bindToLam "y" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ bindToLam "z" $ mkFreeVar "x") ,False),
    ("x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,"x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,"\\y -> x x", bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,"(\\y -> z) (\\y -> z)", bindToLam "y" $ mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "z") ,False),
    ("x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,"\\z -> x x (x x)", bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,"z z (z z) (z z (z z)) (z z (z z) (z z (z z)))", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z"))) ,False),
    ("x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,"\\x -> (\\z -> x) (\\z -> x)", bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,False),
    ("\\x -> x", bindToLam "x" $ mkFreeVar "x" ,"\\z -> y", bindToLam "z" $ mkFreeVar "y" ,False),
    ("\\x -> x", bindToLam "x" $ mkFreeVar "x" ,"(\\y -> y) (\\y -> y)", bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y") ,False),
    ("\\x -> x", bindToLam "x" $ mkFreeVar "x" ,"\\z -> z z", bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z" ,False),
    ("\\x -> x", bindToLam "x" $ mkFreeVar "x" ,"(\\y -> y) (\\y -> y) ((\\y -> y) (\\y -> y))", bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y") `mkApp` (bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y")) ,False),
    ("\\x -> x", bindToLam "x" $ mkFreeVar "x" ,"\\x -> y y (y y)", bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("\\x -> x", bindToLam "x" $ mkFreeVar "x" ,"(\\z -> z z) (\\z -> z z)", bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z") ,False),
    ("y y", mkFreeVar "y" `mkApp` mkFreeVar "y" ,"z z (z z)", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") ,False),
    ("y y", mkFreeVar "y" `mkApp` mkFreeVar "y" ,"\\x -> y y", bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" ,False),
    ("y y", mkFreeVar "y" `mkApp` mkFreeVar "y" ,"(\\z -> x x) (\\z -> x x)", bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("y y", mkFreeVar "y" `mkApp` mkFreeVar "y" ,"\\y -> \\x -> y", bindToLam "y" $ bindToLam "x" $ mkFreeVar "y" ,False),
    ("y y", mkFreeVar "y" `mkApp` mkFreeVar "y" ,"(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x)) ((\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x)))", bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")) `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x"))) ,False),
    ("\\z -> x", bindToLam "z" $ mkFreeVar "x" ,"z", mkFreeVar "z" ,False),
    ("\\z -> x", bindToLam "z" $ mkFreeVar "x" ,"x x (x x) (x x (x x))", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) ,False),
    ("\\z -> x", bindToLam "z" $ mkFreeVar "x" ,"\\y -> y y", bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y" ,False),
    ("\\z -> x", bindToLam "z" $ mkFreeVar "x" ,"(\\y -> x x) (\\y -> x x)", bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("\\z -> x", bindToLam "z" $ mkFreeVar "x" ,"\\z -> (\\x -> x) (\\x -> x)", bindToLam "z" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,False),
    ("\\z -> x", bindToLam "z" $ mkFreeVar "x" ,"(\\y -> z) (\\y -> z) ((\\y -> z) (\\y -> z))", bindToLam "y" $ mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "z") `mkApp` (bindToLam "y" $ mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "z")) ,False),
    ("z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,"\\z -> x", bindToLam "z" $ mkFreeVar "x" ,False),
    ("z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,"\\z -> x x", bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,"(\\y -> x) (\\y -> x) ((\\y -> x) (\\y -> x))", bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "x")) ,False),
    ("z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,"\\x -> x x (x x)", bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,"(\\z -> y y) (\\z -> y y)", bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,"\\y -> \\y -> y", bindToLam "y" $ bindToLam "y" $ mkFreeVar "y" ,False),
    ("\\y -> x", bindToLam "y" $ mkFreeVar "x" ,"(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,False),
    ("\\y -> x", bindToLam "y" $ mkFreeVar "x" ,"\\x -> \\x -> x", bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" ,False),
    ("\\y -> x", bindToLam "y" $ mkFreeVar "x" ,"x x (x x) (x x (x x)) (x x (x x) (x x (x x)))", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) ,False),
    ("\\y -> x", bindToLam "y" $ mkFreeVar "x" ,"\\y -> x x (x x)", bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("\\y -> x", bindToLam "y" $ mkFreeVar "x" ,"(\\y -> y y) (\\y -> y y)", bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("\\y -> x", bindToLam "y" $ mkFreeVar "x" ,"\\z -> (\\z -> x) (\\z -> x)", bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,False),
    ("x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,"\\y -> y", bindToLam "y" $ mkFreeVar "y" ,False),
    ("x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,"(\\y -> y) (\\y -> y)", bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y") ,False),
    ("x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,"\\z -> z z", bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z" ,False),
    ("x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,"(\\y -> y) (\\y -> y) ((\\y -> y) (\\y -> y))", bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y") `mkApp` (bindToLam "y" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y")) ,False),
    ("x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,"\\x -> y y (y y)", bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("x x (x x)", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,"(\\z -> z z) (\\z -> z z)", bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z" `mkApp` mkFreeVar "z") ,False),
    ("\\x -> y", bindToLam "x" $ mkFreeVar "y" ,"\\z -> z", bindToLam "z" $ mkFreeVar "z" ,False),
    ("\\x -> y", bindToLam "x" $ mkFreeVar "y" ,"(\\x -> z) (\\x -> z)", bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z") ,False),
    ("\\x -> y", bindToLam "x" $ mkFreeVar "y" ,"\\x -> \\y -> x", bindToLam "x" $ bindToLam "y" $ mkFreeVar "x" ,False),
    ("\\x -> y", bindToLam "x" $ mkFreeVar "y" ,"(\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x)) ((\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x)))", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x"))) ,False),
    ("\\x -> y", bindToLam "x" $ mkFreeVar "y" ,"\\y -> y y (y y)", bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,"x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,"x x (x x) (x x (x x))", mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) ,False),
    ("(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,"\\x -> \\z -> x", bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" ,False),
    ("(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,"(\\z -> y) (\\z -> y) ((\\z -> y) (\\z -> y))", bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y") `mkApp` (bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y")) ,False),
    ("(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,"\\y -> (\\x -> x) (\\x -> x)", bindToLam "y" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,False),
    ("(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,"(\\y -> \\z -> x) (\\y -> \\z -> x)", bindToLam "y" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ bindToLam "z" $ mkFreeVar "x") ,False),
    ("\\z -> y", bindToLam "z" $ mkFreeVar "y" ,"\\y -> x", bindToLam "y" $ mkFreeVar "x" ,False),
    ("\\z -> y", bindToLam "z" $ mkFreeVar "y" ,"(\\z -> y) (\\z -> y)", bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y") ,False),
    ("\\z -> y", bindToLam "z" $ mkFreeVar "y" ,"\\y -> \\z -> x", bindToLam "y" $ bindToLam "z" $ mkFreeVar "x" ,False),
    ("\\z -> y", bindToLam "z" $ mkFreeVar "y" ,"y y (y y) (y y (y y)) (y y (y y) (y y (y y)))", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y"))) ,False),
    ("\\z -> y", bindToLam "z" $ mkFreeVar "y" ,"\\z -> \\z -> y", bindToLam "z" $ bindToLam "z" $ mkFreeVar "y" ,False),
    ("\\z -> y", bindToLam "z" $ mkFreeVar "y" ,"(\\x -> z z) (\\x -> z z)", bindToLam "x" $ mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z" `mkApp` mkFreeVar "z") ,False),
    ("y y (y y)", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,"\\z -> y", bindToLam "z" $ mkFreeVar "y" ,False),
    ("y y (y y)", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,"\\z -> \\x -> x", bindToLam "z" $ bindToLam "x" $ mkFreeVar "x" ,False),
    ("y y (y y)", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,"(\\x -> x x) (\\x -> x x)", bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("y y (y y)", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,"\\x -> \\x -> y", bindToLam "x" $ bindToLam "x" $ mkFreeVar "y" ,False),
    ("y y (y y)", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,"(\\z -> z) (\\z -> z) ((\\z -> z) (\\z -> z))", bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z") `mkApp` (bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z")) ,False),
    ("y y (y y)", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,"\\y -> (\\z -> x) (\\z -> x)", bindToLam "y" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,False),
    ("\\y -> y", bindToLam "y" $ mkFreeVar "y" ,"z z (z z)", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") ,False),
    ("\\y -> y", bindToLam "y" $ mkFreeVar "y" ,"(\\x -> z) (\\x -> z)", bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z") ,False),
    ("\\y -> y", bindToLam "y" $ mkFreeVar "y" ,"\\x -> \\y -> x", bindToLam "x" $ bindToLam "y" $ mkFreeVar "x" ,False),
    ("\\y -> y", bindToLam "y" $ mkFreeVar "y" ,"(\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x)) ((\\z -> x) (\\z -> x) ((\\z -> x) (\\z -> x)))", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x"))) ,False),
    ("\\y -> y", bindToLam "y" $ mkFreeVar "y" ,"\\y -> y y (y y)", bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") ,False),
    ("(\\z -> x) (\\z -> x)", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,"x x", mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("(\\z -> x) (\\z -> x)", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,"\\x -> x x", bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("(\\z -> x) (\\z -> x)", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,"(\\z -> z) (\\z -> z)", bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "z") ,False),
    ("(\\z -> x) (\\z -> x)", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,"\\y -> \\y -> x", bindToLam "y" $ bindToLam "y" $ mkFreeVar "x" ,False),
    ("(\\z -> x) (\\z -> x)", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,"(\\x -> z) (\\x -> z) ((\\x -> z) (\\x -> z))", bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z") `mkApp` (bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z")) ,False),
    ("(\\z -> x) (\\z -> x)", bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,"\\z -> \\y -> y", bindToLam "z" $ bindToLam "y" $ mkFreeVar "y" ,False),
    ("\\x -> z", bindToLam "x" $ mkFreeVar "z" ,"z z", mkFreeVar "z" `mkApp` mkFreeVar "z" ,False),
    ("\\x -> z", bindToLam "x" $ mkFreeVar "z" ,"\\y -> x x", bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" ,False),
    ("\\x -> z", bindToLam "x" $ mkFreeVar "z" ,"(\\y -> z) (\\y -> z)", bindToLam "y" $ mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "z") ,False),
    ("\\x -> z", bindToLam "x" $ mkFreeVar "z" ,"\\z -> x x (x x)", bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") ,False),
    ("\\x -> z", bindToLam "x" $ mkFreeVar "z" ,"z z (z z) (z z (z z)) (z z (z z) (z z (z z)))", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z"))) ,False),
    ("\\x -> z", bindToLam "x" $ mkFreeVar "z" ,"\\x -> (\\z -> x) (\\z -> x)", bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x") ,False),
    ("z z (z z)", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") ,"(\\x -> x) (\\x -> x)", bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") ,False),
    ("z z (z z)", mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z") ,"y y (y y) (y y (y y))", mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) ,False)]

data Res a = Res String Term a

freeVarsRes = 
    [Res "x" (mkFreeVar "x") (fromList ["x"]),
    Res "y" (mkFreeVar "y") (fromList ["y"]),
    Res "z" (mkFreeVar "z") (fromList ["z"]),
    Res "x x" (mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "\\x -> x" (bindToLam "x" $ mkFreeVar "x") (fromList []),
    Res "y y" (mkFreeVar "y" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "\\z -> x" (bindToLam "z" $ mkFreeVar "x") (fromList ["x"]),
    Res "y x" (mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "x y" (mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "\\x -> y" (bindToLam "x" $ mkFreeVar "y") (fromList ["y"]),
    Res "z z" (mkFreeVar "z" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "z y" (mkFreeVar "z" `mkApp` mkFreeVar "y") (fromList ["y","z"]),
    Res "z x" (mkFreeVar "z" `mkApp` mkFreeVar "x") (fromList ["x","z"]),
    Res "\\x -> z" (bindToLam "x" $ mkFreeVar "z") (fromList ["z"]),
    Res "y z" (mkFreeVar "y" `mkApp` mkFreeVar "z") (fromList ["y","z"]),
    Res "x z" (mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x","z"]),
    Res "x x (x x)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> x x" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList []),
    Res "x x z" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x","z"]),
    Res "\\z -> x x" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "x x y" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "x x x" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "\\x -> \\x -> x" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x") (fromList []),
    Res "z (x x)" (mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","z"]),
    Res "y (x x)" (mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "x (x x)" (mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> y y" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "(\\x -> x) (\\x -> x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList []),
    Res "(\\x -> x) (x x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "(\\x -> x) z" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "\\x -> \\z -> x" (bindToLam "x" $ bindToLam "z" $ mkFreeVar "x") (fromList []),
    Res "(\\x -> x) y" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "\\z -> \\z -> x" (bindToLam "z" $ bindToLam "z" $ mkFreeVar "x") (fromList ["x"]),
    Res "(\\x -> x) x" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "x x (\\x -> x)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> y x" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["y"]),
    Res "z (\\x -> x)" (mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["z"]),
    Res "\\z -> y x" (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "y (\\x -> x)" (mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["y"]),
    Res "\\y -> y x" (bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "x (\\x -> x)" (mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x"]),
    Res "y y (y y)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y"]),
    Res "y y (\\x -> x)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["y"]),
    Res "y y (x x)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\x -> x y" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "y y z" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "z") (fromList ["y","z"]),
    Res "\\z -> x y" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "y y y" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "\\y -> x y" (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x"]),
    Res "y y x" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "\\x -> \\x -> y" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "y") (fromList ["y"]),
    Res "(\\x -> x) (y y)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y"]),
    Res "x x (y y)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "z (y y)" (mkFreeVar "z" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y","z"]),
    Res "\\x -> z z" (bindToLam "x" $ mkFreeVar "z" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "y (y y)" (mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y"]),
    Res "x (y y)" (mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "(\\z -> x) (\\z -> x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x"]),
    Res "(\\z -> x) (y y)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "(\\z -> x) (\\x -> x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x"]),
    Res "(\\z -> x) (x x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> z y" (bindToLam "x" $ mkFreeVar "z" `mkApp` mkFreeVar "y") (fromList ["y","z"]),
    Res "(\\z -> x) z" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x","z"]),
    Res "(\\z -> x) y" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "\\y -> z y" (bindToLam "y" $ mkFreeVar "z" `mkApp` mkFreeVar "y") (fromList ["z"]),
    Res "(\\z -> x) x" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "y y (\\z -> x)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "(\\x -> x) (\\z -> x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x"]),
    Res "x x (\\z -> x)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x"]),
    Res "z (\\z -> x)" (mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x","z"]),
    Res "y (\\z -> x)" (mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\y -> z x" (bindToLam "y" $ mkFreeVar "z" `mkApp` mkFreeVar "x") (fromList ["x","z"]),
    Res "x (\\z -> x)" (mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> \\x -> z" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "z") (fromList ["z"]),
    Res "y x (y x)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "y x (\\z -> x)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "y x (y y)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> y z" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "z") (fromList ["y","z"]),
    Res "y x (\\x -> x)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "y x (x x)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\y -> y z" (bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "y x z" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x","y","z"]),
    Res "y x y" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "y x x" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "(\\z -> x) (y x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "y y (y x)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "(\\x -> x) (y x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\y -> x z" (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x","z"]),
    Res "x x (y x)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "z (y x)" (mkFreeVar "z" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y","z"]),
    Res "y (y x)" (mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "x (y x)" (mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\x -> x x (x x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList []),
    Res "\\z -> x x (x x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> \\x -> x x" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList []),
    Res "\\x -> x x z" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "\\z -> x x z" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x"]),
    Res "\\y -> x x z" (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["x","z"]),
    Res "\\x -> \\z -> x x" (bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList []),
    Res "\\z -> \\z -> x x" (bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "\\x -> x x y" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "\\z -> x x y" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "x y (x y)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> x x x" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList []),
    Res "x y (\\y -> x)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\z -> x x x" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "x y (y x)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\x -> \\x -> \\x -> x" (bindToLam "x" $ bindToLam "x" $ bindToLam "x" $ mkFreeVar "x") (fromList []),
    Res "x y (y y)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "x y (\\x -> x)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "x y (x x)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\x -> z (x x)" (bindToLam "x" $ mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["z"]),
    Res "x y z" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "z") (fromList ["x","y","z"]),
    Res "\\z -> z (x x)" (bindToLam "z" $ mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "x y y" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "y") (fromList ["x","y"]),
    Res "\\y -> z (x x)" (bindToLam "y" $ mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","z"]),
    Res "x y x" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "(\\y -> x) (x y)" (bindToLam "y" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "y x (x y)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> y (x x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["y"]),
    Res "y y (x y)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\z -> y (x x)" (bindToLam "z" $ mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "(\\x -> x) (x y)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "x x (x y)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "z (x y)" (mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y","z"]),
    Res "y (x y)" (mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "x (x y)" (mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> x (x x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList []),
    Res "(\\x -> y) (\\x -> y)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["y"]),
    Res "\\z -> x (x x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "(\\x -> y) (x y)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y"]),
    Res "(\\x -> y) (\\y -> x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "x")) (fromList ["x","y"]),
    Res "\\x -> \\x -> y y" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "(\\x -> y) (y x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "(\\x -> y) (y y)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y"]),
    Res "\\x -> (\\x -> x) (\\x -> x)" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList []),
    Res "(\\x -> y) (\\x -> x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["y"]),
    Res "(\\x -> y) (x x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"]),
    Res "(\\x -> y) z" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "z") (fromList ["y","z"]),
    Res "(\\x -> y) y" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "(\\x -> y) x" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "x y (\\x -> y)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> (\\x -> x) (x x)" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList []),
    Res "(\\y -> x) (\\x -> y)" (bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\z -> (\\x -> x) (x x)" (bindToLam "z" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x"]),
    Res "y x (\\x -> y)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["x","y"]),
    Res "y y (\\x -> y)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["y"]),
    Res "(\\x -> x) (\\x -> y)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["y"]),
    Res "x x (\\x -> y)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> (\\x -> x) z" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "z (\\x -> y)" (mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["y","z"]),
    Res "\\z -> (\\x -> x) z" (bindToLam "z" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z") (fromList []),
    Res "y (\\x -> y)" (mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["y"]),
    Res "x (\\x -> y)" (mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["x","y"]),
    Res "\\x -> \\x -> \\z -> x" (bindToLam "x" $ bindToLam "x" $ bindToLam "z" $ mkFreeVar "x") (fromList []),
    Res "z z (z z)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["z"]),
    Res "z z (\\x -> y)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (fromList ["y","z"]),
    Res "z z (x y)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (fromList ["x","y","z"]),
    Res "\\x -> (\\x -> x) y" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (fromList ["y"]),
    Res "z z (\\y -> x)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "x")) (fromList ["x","z"]),
    Res "z z (y x)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (fromList ["x","y","z"]),
    Res "\\x -> \\z -> \\z -> x" (bindToLam "x" $ bindToLam "z" $ bindToLam "z" $ mkFreeVar "x") (fromList []),
    Res "z z (y y)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y","z"]),
    Res "\\z -> \\z -> \\z -> x" (bindToLam "z" $ bindToLam "z" $ bindToLam "z" $ mkFreeVar "x") (fromList ["x"]),
    Res "z z (\\x -> x)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["z"]),
    Res "z z (x x)" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","z"]),
    Res "z z z" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` mkFreeVar "z") (fromList ["z"]),
    Res "\\z -> (\\x -> x) x" (bindToLam "z" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "z z y" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` mkFreeVar "y") (fromList ["y","z"]),
    Res "z z x" (mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` mkFreeVar "x") (fromList ["x","z"]),
    Res "(\\x -> y) (z z)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["y","z"]),
    Res "x y (z z)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["x","y","z"]),
    Res "(\\y -> x) (z z)" (bindToLam "y" $ mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["x","z"]),
    Res "\\x -> x x (\\x -> x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList []),
    Res "y x (z z)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["x","y","z"]),
    Res "\\z -> x x (\\x -> x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x"]),
    Res "y y (z z)" (mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["y","z"]),
    Res "\\x -> \\x -> y x" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["y"]),
    Res "(\\x -> x) (z z)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["z"]),
    Res "x x (z z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["x","z"]),
    Res "\\y -> \\x -> y x" (bindToLam "y" $ bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList []),
    Res "z (z z)" (mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["z"]),
    Res "\\x -> z (\\x -> x)" (bindToLam "x" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["z"]),
    Res "y (z z)" (mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["y","z"]),
    Res "\\z -> z (\\x -> x)" (bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList []),
    Res "x (z z)" (mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["x","z"]),
    Res "\\x -> \\z -> y x" (bindToLam "x" $ bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["y"]),
    Res "\\z -> \\z -> y x" (bindToLam "z" $ bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x","y"]),
    Res "\\y -> \\z -> y x" (bindToLam "y" $ bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "\\x -> y (\\x -> x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["y"]),
    Res "\\x -> \\y -> y x" (bindToLam "x" $ bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList []),
    Res "\\y -> \\y -> y x" (bindToLam "y" $ bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (fromList ["x"]),
    Res "\\z -> x (\\x -> x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["x"]),
    Res "\\x -> y y (y y)" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (fromList ["y"]),
    Res "\\x -> y y (\\x -> x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (fromList ["y"]),
    Res "z y (z y)" (mkFreeVar "z" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "y")) (fromList ["y","z"]),
    Res "z y (\\z -> y)" (mkFreeVar "z" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "z" $ mkFreeVar "y")) (fromList ["y","z"]),
    Res "z y (z z)" (mkFreeVar "z" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (fromList ["y","z"]),
    Res "\\x -> y y (x x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["y"]),
    Res "\\z -> y y (x x)" (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (fromList ["x","y"])]

isClosedRes = 
    [Res "\\x -> x x (\\x -> x)"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))True,
    Res "\\x -> \\z -> \\z -> x x"(bindToLam "x"(bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> \\x -> \\z -> \\z -> x"(bindToLam "x"(bindToLam "x"(bindToLam "z"(bindToLam "z"(mkFreeVar "x")))))True,
    Res "\\y -> \\x -> y y (x x)"(bindToLam "y"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\z -> \\x -> (\\z -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))True,
    Res "\\z -> \\x -> x x (\\z -> x)"(bindToLam "z"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))True,
    Res "\\x -> \\y -> y x y"(bindToLam "x"(bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))True,
    Res "\\x -> \\z -> \\z -> x x (x x)"(bindToLam "x"(bindToLam "z"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> (\\y -> x) (x x (x x))"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\z -> z) (\\x -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\z -> x x) (x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> \\z -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))True,
    Res "\\x -> (\\y -> x) (x x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))True,
    Res "\\z -> (\\y -> z) (\\x -> \\x -> x)"(bindToLam "z"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))True,
    Res "\\x -> \\x -> \\y -> \\z -> y x"(bindToLam "x"(bindToLam "x"(bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> x (x x) (\\z -> z)"(bindToLam "x"(((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))True,
    Res "\\x -> (\\x -> x) (\\x -> x) (x x x)"(bindToLam "x"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> \\x -> \\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))))True,
    Res "\\x -> (\\x -> x) (x x) x"(bindToLam "x"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))True,
    Res "\\x -> x ((\\x -> x) (x x))"(bindToLam "x"((mkFreeVar "x") `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\z -> (\\x -> x) z z"(bindToLam "z"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "z")))True,
    Res "\\x -> (\\x -> \\z -> x) (x (x x))"(bindToLam "x"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\y -> (\\z -> y y) (\\x -> \\z -> x)"(bindToLam "y"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x")))))True,
    Res "\\z -> \\x -> \\x -> z (\\z -> x)"(bindToLam "z"(bindToLam "x"(bindToLam "x"((mkFreeVar "z") `mkApp` (bindToLam "z"(mkFreeVar "x"))))))True,
    Res "\\x -> (\\z -> \\z -> x) (\\z -> z)"(bindToLam "x"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))True,
    Res "\\y -> \\x -> \\x -> y x (y x)"(bindToLam "y"(bindToLam "x"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> \\y -> \\z -> y x (\\z -> x)"(bindToLam "x"(bindToLam "y"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))))True,
    Res "\\x -> \\y -> \\z -> y x (\\x -> x)"(bindToLam "x"(bindToLam "y"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))))True,
    Res "\\x -> x x (\\x -> x) ((\\x -> x) x)"(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> x x (\\x -> x) (x x)"(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))True,
    Res "\\x -> \\y -> \\y -> y x x"(bindToLam "x"(bindToLam "y"(bindToLam "y"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> \\y -> \\y -> (\\z -> x) (y x)"(bindToLam "x"(bindToLam "y"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\y -> (\\z -> z) (\\x -> y x)"(bindToLam "y"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> \\y -> \\x -> x x (y x)"(bindToLam "x"(bindToLam "y"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\z -> (\\y -> \\x -> x) (z (\\x -> x))"(bindToLam "z"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))))True,
    Res "\\x -> \\x -> \\x -> \\x -> x x (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))))True,
    Res "\\x -> (\\y -> y x) (x (x x))"(bindToLam "x"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\y -> \\x -> x) (\\y -> y x)"(bindToLam "x"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> x (\\x -> x) ((\\x -> x) (x x))"(bindToLam "x"(((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))True,
    Res "\\x -> (\\x -> x) (x x) (x (\\x -> x))"(bindToLam "x"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x")))))True,
    Res "\\x -> \\z -> x x (x x) (\\y -> x)"(bindToLam "x"(bindToLam "z"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x")))))True,
    Res "(\\x -> x x (x x)) (\\z -> \\z -> z)"((bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))) `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "z"))))True,
    Res "\\z -> \\x -> z (x x (x x))"(bindToLam "z"(bindToLam "x"((mkFreeVar "z") `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\x -> \\y -> \\z -> x y (\\y -> x)"(bindToLam "x"(bindToLam "y"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x"))))))True,
    Res "\\z -> \\x -> x z (\\x -> x x)"(bindToLam "z"(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\z -> \\x -> z z (\\x -> x x)"(bindToLam "z"(bindToLam "x"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))True,
    Res "\\z -> \\x -> x x z (\\z -> z)"(bindToLam "z"(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"(mkFreeVar "z")))))True,
    Res "\\x -> \\x -> \\z -> \\y -> z (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "z"(bindToLam "y"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))))True,
    Res "\\y -> \\x -> \\x -> (\\y -> x) (x y)"(bindToLam "y"(bindToLam "x"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))))True,
    Res "\\y -> (\\x -> y x) (\\x -> x y)"(bindToLam "y"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))True,
    Res "x x z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))False,
    Res "y (\\x -> x)"((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))False,
    Res "y (y y)"((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))False,
    Res "x (\\z -> x)"((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "x")))False,
    Res "z (y x)"((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))False,
    Res "\\x -> z (x x)"(bindToLam "x"((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\z -> x (x x)"(bindToLam "z"((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "x x (\\x -> y)"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))False,
    Res "z z y"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "y"))False,
    Res "\\y -> \\z -> y x"(bindToLam "y"(bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))False,
    Res "\\x -> y y z"(bindToLam "x"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")))False,
    Res "y y (z y)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))False,
    Res "\\z -> x (y y)"(bindToLam "z"((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))False,
    Res "\\z -> (\\z -> x) (\\x -> x)"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))False,
    Res "x x (z x)"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))False,
    Res "(\\x -> z) (y y)"((bindToLam "x"(mkFreeVar "z")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))False,
    Res "y x (\\x -> z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "z")))False,
    Res "y z (z z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))False,
    Res "(\\y -> y) (y z)"((bindToLam "y"(mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))False,
    Res "z (y z)"((mkFreeVar "z") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))False,
    Res "\\z -> y x x"(bindToLam "z"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))False,
    Res "x z (\\z -> y)"(((mkFreeVar "x") `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"(mkFreeVar "y")))False,
    Res "(\\z -> z) (x z)"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z")))False,
    Res "x x (x z)"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "z")))False,
    Res "x x (x x) (\\z -> y)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "y")))False,
    Res "\\x -> \\z -> x x y"(bindToLam "x"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))False,
    Res "(\\x -> x x) (z x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))False,
    Res "\\z -> \\z -> x x x"(bindToLam "z"(bindToLam "z"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))False,
    Res "y x (\\x -> x x)"(((mkFreeVar "y") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\y -> x y (x x)"(bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\y -> x y y"(bindToLam "y"(((mkFreeVar "x") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")))False,
    Res "\\z -> (\\y -> x) (x y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))False,
    Res "z (x x z)"((mkFreeVar "z") `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))False,
    Res "(\\z -> x x) (\\z -> z)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))False,
    Res "\\x -> y (x y)"(bindToLam "x"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))False,
    Res "\\x -> (\\x -> y) (\\x -> y)"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))False,
    Res "\\y -> (\\x -> y) (\\y -> x)"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x"))))False,
    Res "x x y (\\z -> y)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "z"(mkFreeVar "y")))False,
    Res "\\y -> (\\x -> y) (x x)"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))False,
    Res "\\z -> (\\x -> y) x"(bindToLam "z"((bindToLam "x"(mkFreeVar "y")) `mkApp` (mkFreeVar "x")))False,
    Res "\\x -> (\\x -> x) (\\x -> y)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))False,
    Res "x x x (\\y -> z)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "y"(mkFreeVar "z")))False,
    Res "x x x (y y)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))False,
    Res "y z (x x x)"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))False,
    Res "(\\x -> \\x -> x) (x x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))False,
    Res "(\\x -> \\x -> x) (x y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))False,
    Res "x x z (\\x -> \\x -> x)"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))False,
    Res "y y (\\x -> \\x -> x)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))False,
    Res "z (x x) (\\y -> z)"(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z")))False,
    Res "z (x x) (x x)"(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))False]

isVal = 
    [Res "x x (x x)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (True),
    Res "y (\\x -> x)" (mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (True),
    Res "x (y y)" (mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (True),
    Res "y x z" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z") (True),
    Res "\\x -> x x y" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y") (True),
    Res "y x (x y)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "x (\\x -> y)" (mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (True),
    Res "y x (z z)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (True),
    Res "\\z -> x (\\x -> x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (True),
    Res "z y (x x)" (mkFreeVar "z" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (True),
    Res "z (z y)" (mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "y")) (True),
    Res "z x (x y)" (mkFreeVar "z" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "y (z x)" (mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "x")) (True),
    Res "\\z -> z (\\z -> x)" (bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (True),
    Res "\\z -> x (\\z -> x)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "x")) (True),
    Res "x y (y z)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "z")) (True),
    Res "\\y -> y x (x x)" (bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (True),
    Res "x z (\\x -> z)" (mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "z")) (True),
    Res "x z z" (mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` mkFreeVar "z") (True),
    Res "x x (x z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "z")) (True),
    Res "x x (x x) (\\z -> z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (bindToLam "z" $ mkFreeVar "z")) (True),
    Res "\\x -> \\x -> x x y" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y") (True),
    Res "\\y -> x y (x y)" (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "x y (\\x -> x x)" (mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x")) (True),
    Res "x x z (\\y -> z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "y" $ mkFreeVar "z")) (True),
    Res "x x z (x y)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "x x (x x) (x x z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "z")) (True),
    Res "\\z -> y y (x y)" (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "\\z -> x (x y)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "\\x -> \\x -> \\x -> y y" (bindToLam "x" $ bindToLam "x" $ bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y") (True),
    Res "x x y (y y)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (True),
    Res "y (x x y)" (mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "\\z -> x (\\x -> y)" (bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (True),
    Res "x x x (z z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (True),
    Res "\\y -> z z (y x)" (bindToLam "y" $ mkFreeVar "z" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (True),
    Res "z (x x x)" (mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x")) (True),
    Res "y z (\\x -> \\x -> x)" (mkFreeVar "y" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x")) (True),
    Res "x (\\x -> \\x -> x)" (mkFreeVar "x" `mkApp` (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x")) (True),
    Res "z (x x) (z x)" (mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "x")) (True),
    Res "\\y -> x (z z)" (bindToLam "y" $ mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (True),
    Res "\\z -> \\y -> \\z -> y x" (bindToLam "z" $ bindToLam "y" $ bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "x") (True),
    Res "y (x x) (\\y -> x x)" (mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x")) (True),
    Res "y (x x) (y y)" (mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (True),
    Res "y x (y (x x))" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (True),
    Res "\\x -> z y (x y)" (bindToLam "x" $ mkFreeVar "z" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (True),
    Res "\\y -> z y (\\x -> x)" (bindToLam "y" $ mkFreeVar "z" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (True),
    Res "\\x -> \\z -> \\z -> x y" (bindToLam "x" $ bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "y") (True),
    Res "\\x -> \\x -> y y y" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` mkFreeVar "y") (True),
    Res "x x x (x (x x))" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (True),
    Res "\\y -> y y (z y)" (bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "y")) (True),
    Res "(\\y -> x) (x y)" (bindToLam "y" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (False),
    Res "\\x -> (\\x -> x) z" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z") (False),
    Res "\\z -> (\\z -> x) (\\x -> x)" (bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (False),
    Res "\\x -> (\\z -> x) x" (bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x") (False),
    Res "(\\z -> y) (y z)" (bindToLam "z" $ mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "z")) (False),
    Res "(\\x -> x x) (x x (x x))" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (False),
    Res "(\\y -> z) (\\x -> x x)" (bindToLam "y" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x")) (False),
    Res "(\\z -> x x) (\\y -> z)" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "y" $ mkFreeVar "z")) (False),
    Res "(\\z -> x x) x" (bindToLam "z" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x") (False),
    Res "\\x -> \\x -> (\\x -> x) (\\x -> x)" (bindToLam "x" $ bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x")) (False),
    Res "\\x -> (\\y -> x) (\\x -> y)" (bindToLam "x" $ bindToLam "y" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y")) (False),
    Res "(\\x -> \\x -> x) (x x x)" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x")) (False),
    Res "(\\x -> \\x -> x) (y x)" (bindToLam "x" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (False),
    Res "(\\y -> x x) (z (x x))" (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (False),
    Res "\\x -> (\\y -> x) (z y)" (bindToLam "x" $ bindToLam "y" $ mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "y")) (False),
    Res "(\\x -> y y) (x x y)" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "y")) (False),
    Res "(\\x -> y y) (x x)" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x")) (False),
    Res "(\\x -> x) (\\x -> x) (x x x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` mkFreeVar "x")) (False),
    Res "(\\x -> x) (\\x -> x) (y y)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (False),
    Res "x z ((\\x -> x) (\\x -> x))" (mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"))) (False),
    Res "(\\x -> x) (x x) ((\\x -> x) (x x))" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (False),
    Res "(\\x -> x) (x x) (y z)" (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "z")) (False),
    Res "\\y -> \\z -> (\\z -> x) (y y)" (bindToLam "y" $ bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "y")) (False),
    Res "(\\z -> z) ((\\x -> x) (x x))" (bindToLam "z" $ mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (False),
    Res "\\y -> (\\y -> y) (z x)" (bindToLam "y" $ bindToLam "y" $ mkFreeVar "y" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "x")) (False),
    Res "(\\x -> x) z ((\\x -> x) (x x))" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x"))) (False),
    Res "(\\x -> x) z (z x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "x")) (False),
    Res "(\\x -> x) z x" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z" `mkApp` mkFreeVar "x") (False),
    Res "x x (x x) ((\\x -> x) z)" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z")) (False),
    Res "y x ((\\x -> x) z)" (mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "z")) (False),
    Res "(\\x -> \\z -> x) (\\y -> \\x -> x)" (bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "y" $ bindToLam "x" $ mkFreeVar "x")) (False),
    Res "(\\x -> \\z -> x) (\\z -> y)" (bindToLam "x" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "z" $ mkFreeVar "y")) (False),
    Res "(\\z -> y y) (\\x -> \\z -> x)" (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ bindToLam "z" $ mkFreeVar "x")) (False),
    Res "(\\x -> x) y (\\y -> y y)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "y" $ mkFreeVar "y" `mkApp` mkFreeVar "y")) (False),
    Res "(\\x -> x) y (y z)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "z")) (False),
    Res "(\\z -> y y) ((\\x -> x) y)" (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y")) (False),
    Res "(\\z -> y) ((\\x -> x) y)" (bindToLam "z" $ mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "y")) (False),
    Res "(\\z -> \\z -> x) ((\\x -> x) (\\x -> x))" (bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"))) (False),
    Res "(\\z -> \\z -> x) (z z)" (bindToLam "z" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "z")) (False),
    Res "(\\y -> x x) (\\z -> \\z -> x)" (bindToLam "y" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "z" $ bindToLam "z" $ mkFreeVar "x")) (False),
    Res "(\\x -> x) x (\\y -> \\x -> x)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "y" $ bindToLam "x" $ mkFreeVar "x")) (False),
    Res "(\\x -> x) x (z y)" (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "z" `mkApp` mkFreeVar "y")) (False),
    Res "(\\z -> y y) ((\\x -> x) x)" (bindToLam "z" $ mkFreeVar "y" `mkApp` mkFreeVar "y" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x")) (False),
    Res "y z ((\\x -> x) x)" (mkFreeVar "y" `mkApp` mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` mkFreeVar "x")) (False),
    Res "x x (\\x -> x) ((\\x -> x) (\\x -> x))" (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"))) (False),
    Res "(\\x -> y x) (x x (\\x -> x))" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"))) (False),
    Res "\\x -> \\y -> (\\z -> x) (y x)" (bindToLam "x" $ bindToLam "y" $ bindToLam "z" $ mkFreeVar "x" `mkApp` (mkFreeVar "y" `mkApp` mkFreeVar "x")) (False),
    Res "(\\x -> y x) (x y)" (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x" `mkApp` (mkFreeVar "x" `mkApp` mkFreeVar "y")) (False),
    Res "(\\y -> \\x -> x) (\\x -> y x)" (bindToLam "y" $ bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "y" `mkApp` mkFreeVar "x")) (False),
    Res "z (\\x -> x) ((\\x -> x) (\\x -> x))" (mkFreeVar "z" `mkApp` (bindToLam "x" $ mkFreeVar "x") `mkApp` (bindToLam "x" $ mkFreeVar "x" `mkApp` (bindToLam "x" $ mkFreeVar "x"))) (False)]

evalRes = 
    [Res "(\\y -> x) (x y)"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))(mkFreeVar "x"),
    Res "\\x -> (\\x -> x) z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(bindToLam "x"(mkFreeVar "z")),
    Res "\\z -> (\\z -> x) (\\x -> x)"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> y) (y z)"((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))(mkFreeVar "y"),
    Res "(\\x -> x x) (\\y -> z)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z")))(mkFreeVar "z"),
    Res "(\\z -> z) (\\x -> x x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\x -> x) (x y)"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))),
    Res "(\\x -> x x) (\\z -> x x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "\\x -> (\\x -> y) (\\x -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "\\z -> (\\y -> x) (\\x -> y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\y -> x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (y y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) (z (x x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\z -> (\\y -> x) (z y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> y y) (x x z)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> y y) z"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (mkFreeVar "z"))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) (\\x -> x) (\\y -> x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> z) ((\\x -> x) (\\x -> x))"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\z -> \\z -> (\\z -> x) (\\z -> x)"(bindToLam "z"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "z"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x) (x x) (z x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))),
    Res "(\\z -> y y) ((\\x -> x) (x x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "y z ((\\x -> x) (x x))"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> y) (z x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> x) z (\\z -> y y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))((mkFreeVar "z") `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))),
    Res "\\x -> (\\x -> z) (\\x -> z)"(bindToLam "x"((bindToLam "x"(mkFreeVar "z")) `mkApp` (bindToLam "x"(mkFreeVar "z"))))(bindToLam "x"(mkFreeVar "z")),
    Res "(\\y -> y y) ((\\x -> x) z)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((mkFreeVar "z") `mkApp` (mkFreeVar "z")),
    Res "(\\y -> z) ((\\x -> x) z)"((bindToLam "y"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(mkFreeVar "z"),
    Res "y y ((\\x -> x) z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")),
    Res "(\\x -> \\z -> x) (y (x x))"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (z z)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))(bindToLam "z'"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))),
    Res "(\\x -> x) (\\x -> x) (\\x -> \\z -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x) y ((\\x -> x) (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) y (z x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) ((\\x -> x) y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))(mkFreeVar "y"),
    Res "z z ((\\x -> x) y)"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "y")),
    Res "(\\z -> \\z -> x) (x (x x))"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\z -> \\z -> x) (x y)"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\y -> z) (\\z -> \\z -> x)"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "x"))))(mkFreeVar "z"),
    Res "(\\x -> x) x (y (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> x) x (\\z -> y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "y")))((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "y"))),
    Res "\\x -> (\\y -> x) (y z)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))))(bindToLam "x"(mkFreeVar "x")),
    Res "z x ((\\x -> x) x)"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")),
    Res "(\\y -> \\z -> x) (x x (\\x -> x))"((bindToLam "y"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> y x) (\\y -> \\z -> x)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> y x) (y (x x))"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> y x) (\\y -> x)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x")))((mkFreeVar "y") `mkApp` (bindToLam "y"(mkFreeVar "x"))),
    Res "(\\y -> x x) (\\x -> y x)"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "(\\x -> y x) (z (\\x -> x))"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\z -> y x) (\\z -> y x)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y x) (z (x x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y x) (x y)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y y) (\\z -> y x)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) y (y (\\x -> x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\y -> y x) (\\x -> y x)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\y -> y x) (x x y)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")),
    Res "(\\y -> y x) y"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "y"))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y) (\\y -> y x)"((bindToLam "z"(mkFreeVar "y")) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))(mkFreeVar "y"),
    Res "(\\z -> y y) (x (\\x -> x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "y y (y y) ((\\x -> x) (\\x -> x))"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(mkFreeVar "x"))),
    Res "(\\z -> \\x -> x) (y y (y y))"((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\z -> (\\x -> x x) (z x)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))(bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))),
    Res "y y (\\x -> x) ((\\x -> x) z)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "z")),
    Res "(\\z -> y y) (y y (\\x -> x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\y -> y x) (y y (x x))"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")),
    Res "\\y -> (\\y -> z) (x x z)"(bindToLam "y"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "y"(mkFreeVar "z")),
    Res "(\\x -> x y) (\\y -> \\y -> x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "y"(bindToLam "y"(mkFreeVar "x"))))(bindToLam "y"(mkFreeVar "x")),
    Res "(\\x -> x y) ((\\x -> x) (\\x -> x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(mkFreeVar "y"),
    Res "(\\x -> x y) (z x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")),
    Res "(\\y -> y x) (\\x -> x y)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "\\x -> (\\z -> x x) (x x z)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "y y z ((\\x -> x) x)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "x")),
    Res "\\y -> (\\z -> x x) (z y)"(bindToLam "y"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))))(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\y -> y y) (y y z)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z"))),
    Res "\\z -> (\\z -> x x) (x x)"(bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\z -> x x) x"(bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\z -> x y) (\\z -> \\x -> x)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "(\\z -> x y) (z y)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> y x) (\\z -> x y)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))((mkFreeVar "y") `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))),
    Res "(\\z -> y) (\\z -> x y)"((bindToLam "z"(mkFreeVar "y")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))(mkFreeVar "y"),
    Res "\\y -> \\y -> (\\x -> y) (\\y -> x)"(bindToLam "y"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "y"(bindToLam "y"(mkFreeVar "y"))),
    Res "(\\x -> x) (x x) (y y y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y"))),
    Res "(\\y -> x y) (y y (\\x -> x))"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\y -> x y) ((\\x -> x) (\\x -> x))"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))),
    Res "(\\y -> x y) (\\z -> y)"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(mkFreeVar "y")))((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "y"))),
    Res "\\x -> \\x -> (\\x -> y) (x x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "y"))),
    Res "\\x -> (\\y -> z) (x x y)"(bindToLam "x"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))(bindToLam "x"(mkFreeVar "z")),
    Res "y y x ((\\x -> x) y)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) x (y y x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")))((mkFreeVar "x") `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\y -> x) (\\x -> y)"(bindToLam "x"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\y -> \\y -> (\\y -> x) (\\x -> y)"(bindToLam "y"(bindToLam "y"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))))(bindToLam "y"(bindToLam "y"(mkFreeVar "x"))),
    Res "(\\x -> \\x -> y) (z (x x))"((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> \\x -> y) (y y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> x) (x x) (\\x -> \\x -> y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y"))))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))),
    Res "(\\x -> x) (y y) (y y (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> x) (y y) ((\\x -> x) (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (y y) (z y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "z")))),
    Res "(\\x -> x) y ((\\x -> x) (y y))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))),
    Res "(\\x -> x) (\\x -> x)"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> x) (x x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\x -> x) z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) (\\x -> x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) (x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x) (\\z -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x x) (\\z -> z)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "(\\z -> z) (\\x -> x x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "x")))),
    Res "\\x -> \\x -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\z -> \\x -> (\\x -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "z"))),
    Res "\\z -> \\z -> (\\x -> x) z"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "z"(mkFreeVar "z"))),
    Res "(\\x -> \\x -> x) (\\x -> \\x -> x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\x -> x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\z -> z)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) (\\x -> \\x -> x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> z) (\\x -> \\x -> x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x) (\\x -> x) (\\y -> \\x -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (\\x -> x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (\\z -> z)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "(\\y -> \\x -> x) ((\\x -> x) (\\x -> x))"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) ((\\x -> x) (\\x -> x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> z) ((\\x -> x) (\\x -> x))"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> \\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\z -> x) (y y)"(bindToLam "y"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\z -> x) (y y)"(bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\z -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (\\x -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) (x x)"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (x x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) z"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) x"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) x"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> \\z -> x) (\\x -> \\z -> x)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (\\y -> y y)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))(bindToLam "z"(bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))),
    Res "(\\x -> \\z -> x) ((\\x -> x) (\\x -> x))"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> \\z -> x) (\\y -> \\x -> x)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "y"(bindToLam "x"(mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (\\z -> z)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(bindToLam "z"(mkFreeVar "z"))),
    Res "(\\y -> y y) (\\x -> \\z -> x)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> x) (\\x -> x) (\\x -> \\z -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\y -> \\x -> x) (\\x -> \\z -> x)"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> \\x -> (\\x -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "\\x -> \\z -> (\\x -> x) (\\z -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\z -> z) (\\x -> \\z -> x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\z -> x) (y x)"(bindToLam "y"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\z -> x) (y x)"(bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\x -> x) (y x)"(bindToLam "y"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> \\y -> (\\x -> x) (y x)"(bindToLam "x"(bindToLam "y"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\z -> z) (x x (x x))"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\y -> x) (x x (x x))"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x x) (x x (x x))"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\z -> (\\x -> x x) (\\y -> z)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\x -> x x) (\\z -> z)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "z"))),
    Res "\\z -> (\\x -> x x) (z z)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))))(bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))),
    Res "\\z -> (\\x -> x x) z"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "z")))(bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))),
    Res "\\z -> (\\y -> z) (\\x -> x x)"(bindToLam "z"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\z -> z) (\\x -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\y -> \\x -> (\\y -> x) (x y)"(bindToLam "y"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\y -> x) (x y)"(bindToLam "x"(bindToLam "y"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\z -> x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\x -> x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (x x (x x))"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\z -> z)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\y -> x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) x"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (\\z -> x x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> z) (\\z -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\y -> x) (\\z -> x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\y -> \\x -> (\\x -> y) (\\y -> x)"(bindToLam "y"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "y"))),
    Res "\\x -> \\y -> (\\x -> y) (\\y -> x)"(bindToLam "x"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "y"))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\x -> \\x -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\x -> \\z -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\z -> \\x -> \\x -> (\\x -> x) z"(bindToLam "z"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "z"(bindToLam "x"(bindToLam "x"(mkFreeVar "z")))),
    Res "\\x -> \\z -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "x"(bindToLam "z"(bindToLam "x"(mkFreeVar "z")))),
    Res "\\z -> \\z -> \\z -> (\\x -> x) z"(bindToLam "z"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "z"(bindToLam "z"(bindToLam "z"(mkFreeVar "z")))),
    Res "\\x -> (\\y -> x x) (x x x)"(bindToLam "x"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (x x x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\z -> z) (x x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\y -> x) (x x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> \\x -> x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (x x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\y -> x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\x -> x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (x x (x x))"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) (\\y -> z)"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\z -> z)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) (z z)"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) z"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "z")))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\y -> x x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x")))]